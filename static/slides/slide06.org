#+TITLE: 確率シミュレーション
#+SUBTITLE: 第6講 - 乱数を用いた数値実験
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@gmail.com
#+DATE: 
#+STARTUP: hidestars content indent
# Time-stamp: <2025-05-09 16:20:07 mura>
:REVEAL:
#+SETUPFILE: "./reveal.js/local/mycourse.org"
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
- シミュレーション例として epdemic を追加(説明はなし)
- mc-xxx.r は若干修正 (図の書き方は考えてもよい)

* 講義の内容
:PROPERTIES:
:ID:       FBCA7D72-6B67-460E-ADFD-D7438C668966
:END:
- 計算機による数値実験
- 乱数とは
- 乱数を用いた数値実験

#+begin_src R :exports none :tangle no
  setwd("~/Desktop/lectures/u-tokyo/spring/course")
#+end_src
#+begin_src R :exports none
  ### 第6講 サンプルコード
  library(tidyverse)
#+end_src


* 計算機による数値実験
** データ解析の枠組
- 分析の目的
  - 集団の背後にある共通の法則の発見
  - 推測された法則に基づく将来の予測
- 集団全体のデータが入手できることは稀
  - 現時点の集団に含まれているとは限らない
  - 将来のデータは入手不可
- *分析における課題*
  #+begin_quote
  分析対象の集団の一部のデータのみを用いて，
  そこから集団全体の性質についての知見を得るには?
  #+end_quote

** データのもつべき性質
- 偏った一部のデータから全体の性質の推測は困難
  - 知りたい事柄 : [[color:green][日本全体の平均気温]]
  - 得られるデータ : [[color:green][沖縄県の各地点の気温]]
- 直感的にはデータを *ランダム* に収集すれば良い
  - そもそもランダムとは?
  - ランダムにデータを収集するコストは?
- *データ収集の問題* 
  #+begin_quote
  *ランダム*
  にデータを収集することで
  分析における課題が解決できる根拠は？
  #+end_quote

** 理論解析と数値実験
- *データ収集の問題* 
  #+begin_quote
  *ランダム*
  にデータを収集することで
  分析における課題が解決できる根拠は？
  #+end_quote
- 厳密な意味での解答
  - (測度論的)確率論 
  - その理解のための他の数学分野
- 乱数を使った数値実験
  - 計算機上でランダムネスを実現
  - ランダムネスから結論される数学的結果を直接観察


* 乱数とは
** 擬似乱数
- コンピューターで生成された数列
  - 完全にランダムに数字を発生されることは不可能 
  - Rでは *Mersenne-Twister 法* が標準で用いられる
  - ~help(Random)~ 参照
- 数値シミュレーションは再現可能
  - 乱数の *シード値* を指定して再現性を担保 
  - 同一のシード値から生成される乱数系列は同一
  - 関数 ~set.seed()~ 参照

** 基本的な乱数
#   基本的な乱数: ランダムサンプリング・二項乱数・一様乱数
- *ランダムサンプリング* (無作為抽出)
  - 与えられた集合の要素をランダムに抽出する乱数
- *二項乱数*
  - 確率 \(p\) で表が出るコインを \(n\) 回投げた際の表の数
  - 確率 \(p\) に対する次数 \(n\) の二項乱数
- *一様乱数* 
  - 決まった区間 \((a, b)\) からランダムに発生する乱数
  - 区間 \((a,b)\) 上の一様乱数
- /[[color:orange][これ以外にも種々の乱数が存在]]/

** 乱数を発生する関数
- Rには様々な確率分布に従う乱数が実装されている
  - ~base::sample()~ : ランダムサンプリング
  - ~stats::rbinom()~ : 二項乱数
  - ~stats::runif()~ : 一様乱数
- これ以外は次回以降で取り上げる

** 関数の利用例
:PROPERTIES:
:ID:       99B81ED0-F8BD-4E98-88B4-313F25E466D6
:END:
- [[color:green][関数 ~sample()~ の使い方]]
  #+begin_src R :exports none
    #' @exercise 乱数で用いた例
  #+end_src
  #+begin_src R
    #' 関数 sample() の使い方
    x <- 1:10 # サンプリング対象の集合をベクトルとして定義
    set.seed(123) # 乱数のシード値(任意に決めてよい)を指定
    sample(x, 5)  # xから5つの要素を重複なしでランダムに抽出
    sample(x, length(x)) # xの要素のランダムな並べ替えとなる
    sample(x, 5, replace=TRUE) # xから5つの要素を重複ありでランダムに抽出
    sample(1:6, 10, replace=TRUE) # サイコロを10回振る実験の再現
    sample(1:6, 10, prob=6:1, replace=TRUE) # 出る目の確率に偏りがある場合
  #+end_src

#+reveal: split
- [[color:green][関数 ~rbinom()/runif()~ の使い方]]
  #+begin_src R
    #' 関数 rbinom() の使い方
    rbinom(10, size=4, prob=0.5) # 確率0.5に対する次数4の二項乱数を10個発生
    rbinom(20, size=4, prob=0.2) # 個数を20, 確率を0.2に変更
    #' 関数 runif() の使い方
    runif(5, min=-1, max=2) # 区間(-1,2)上の一様乱数を5個発生
    runif(5) # 指定しない場合は区間(0,1)が既定値
  #+end_src

#+reveal: split
- [[color:green][関数 ~set.seed()~ について]]
  #+begin_src R
    #' 関数 set.seed() の使い方
    set.seed(1) # 乱数のシード値をseed=1で指定
    runif(5) 
    set.seed(2) # 乱数のシード値をseed=2で指定
    runif(5)    # seed=1の場合と異なる系列が観測される
    set.seed(1) # 乱数のシード値をseed=1で指定
    runif(5)    # 初めのseed=1の場合と同じ系列が再現される
  #+end_src


* 乱数を用いた数値実験
** 確率シミュレーション
- 確率的現象の理解
  - 抽象化・単純化した問題 : 詳細な理論的解析が可能
  - 複雑な問題 : 理論的に解析を行うことが難しい
- 計算機上の擬似乱数を利用した数値的解析
  - 確率シミュレーション (stochastic simulation) 
  - モンテカルロ法 (Monte-Carlo method) 
  などと呼ばれる
- 利点
  - 計算機上では繰り返しシミュレーションが可能
  - 原因となる要素を自由に設定して結果の観察が可能

** 繰り返し実験の関数
- 同じ手続きを指定した回数繰り返して評価
- 関数 ~base::replicate()~ :
  #+begin_src R :eval no :tangle no
    replicate(n, expr, simplify = "array")
    #' n: 繰り返し回数 
    #' expr: 評価する手続き(関数を定義) (1回の実験に相当)
    #' simplify: 出力の形式を指定
  #+end_src

** 数値実験の例
:PROPERTIES:
:ID:       12536E56-C64E-49DE-9F92-BBFA17948131
:END:
- [[color:green][2つのサイコロを振る試行]]
  #+begin_src R
    #' 2つのサイコロを振る試行の数値実験
    #' 試行(1回の実験)を行う関数を用意する
    my_trial <- function(){ # この問題では引数は不要
      dice <- sample(1:6, 2, replace=TRUE) # 2個のサイコロを振る
      return(dice)
    }
    #' 乱数のシード値を指定
    set.seed(20240524)
    #' 確率シミュレーションを実行
    my_data <- replicate(10, # 10回実験
                         my_trial()) # 実行する関数を指定
    print(my_data) # 実験結果は行列(配列)として保存されている
  #+end_src


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       9591DAC4-F181-4367-B4DF-8D1E5F314E21
:END:
- 以下のようなコイン投げの賭けを考える
  #+begin_quote
  Alice と Bob の二人で交互にコインを投げ，最初に表が出た方を勝ちとする．
  #+end_quote
  この賭けの勝率を求めるための確率シミュレーションを行いなさい

#+begin_src R :eval no :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice コイン投げの賭け
  #'
  #' 試行を行う関数
  my_trial <- function(){ 
    while(TRUE){ # 永久に回るループ
      if(sample(c("h","t"),1) == "h"){ # h:head，t:tail
        return("Alice") # Aliceが表を出して終了
      }
      if(sample(c("h","t"),1) == "h"){
        return("Bob") # Bobが表を出して終了
      }
      #' どちらも裏ならもう一度ループ
    }
  }
  #' @notes
  #' この関数は rbinom を用いても実装できるので試みてみよう
  #' 
  #' 試行を行ってみる (勝った方の名前が表示される)
  my_trial()
  my_trial()
  #'
  #' 確率シミュレーション
  #' set.seed(8888) # 実験を再現する場合はシードを指定
  mc <- 10000 # 回数を設定 
  my_data <- replicate(mc, my_trial())
  str(my_data) # 結果が mc 次元のベクトルになっていることが確認できる
  #'
  #' 簡単な集計 (この賭けは先手が有利なはず)
  table(my_data) # 頻度を表示する
  table(my_data)/mc # 勝率の計算 (全実験回数で除算)
  #' ---------------------------------------------------------------------------
#+end_src
     

* 確率シミュレーションの例
** Buffon の針
:PROPERTIES:
:ID:       C51D1052-6784-42AD-B54D-A55C06FC9F92
:END:
- 問題
  #+begin_quote
  2次元平面上に等間隔 \(d\) で平行線が引いてある．
  長さ \(l\) の針を
  この平面上にランダムに落としたとき，
  平行線と交わる確率はいくつか？
  ただし \(l\leq d\) とする．
  #+end_quote
  - 針の位置(例えば中心)と平行線となす角度が適当な範囲でランダムに選ばれると考えればよい

#+begin_src R :eval no :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice Buffonの針
  #'
  #' 針を投げる試行を定義する
  #' 試行の周期性から1本の線の回りで問題を考えれば良い
  #' 針の中心位置 x (-d/2<x<d/2) と向き theta (0<theta<2π) をランダムに生成
  #' 針の先と尾の座標の符号が異なれば位置0の線と交わっていると判断できる
  #' 
  buffon_trial <- function(d, l, verbose = FALSE){ # dとlを指定
    x <- runif(1, min = -d/2, max = d/2) # 位置
    theta <- runif(1, min = 0, max = 2*pi) # 角度
    cross <- FALSE # 交わったかどうかを示す変数
    if((x+l*cos(theta)/2)*(x-l*cos(theta)/2) < 0){
      cross <- TRUE # 交わった場合に書き換え
    }
    if(verbose == TRUE){ # 位置と角度も返す
      return(c(x = x, theta = theta,       # ベクトルで返すので
               cross = as.numeric(cross))) # データ型を揃える
    } else { # 交わったかどうかだけ返す
      return(cross) # 論理値のまま返す
    }
  }
  #'
  #' 試行を行ってみる
  d <- 10
  l <- 7
  buffon_trial(d, l)
  buffon_trial(d, l)
  #'
  #' 詳細な情報を表示する場合 (絵を描くときに用いる)
  buffon_trial(d, l, verbose = TRUE)
  buffon_trial(d, l, verbose = TRUE)
  #'
  #' 絵にしてみる
  mc <- 10
  replicate(mc, buffon_trial(d, l, verbose = TRUE)) |>
    t() |> # 配列を転置
    as_tibble() |> # tibble に変換
    mutate( # 図に必要な情報を加える
      y = runif(mc, min = -(d+l)/2, max = (d+l)/2), # 中心のy座標をランダムに生成
      x1 = x-l/2*cos(theta), 
      x2 = x+l/2*cos(theta),
      y1 = y-l/2*sin(theta),
      y2 = y+l/2*sin(theta),
      cross = as.logical(cross)) |> # 交わり表すラベル(論理値)
    ggplot() + 
    geom_vline(xintercept = c(-d,0,d)) + # 縦棒を描く
    geom_segment(aes(x = x1, y = y1,       # 始点
                     xend = x2, yend = y2, # 終点
                     colour = cross)) +    # 交わりを表示
    labs(x = "x", y = "y") +
    coord_fixed() # 座標軸の比を1に固定
  #'
  #' xとthetaの関係を図にしてみる
  mc <- 3000
  replicate(mc, buffon_trial(d, l, verbose = TRUE)) |>
    t() |> 
    as_tibble() |> 
    mutate( # 図に必要な情報を加える
      cross = as.logical(cross)) |> # 交わり表すラベル(論理値)
    ggplot(aes(x = x, y = theta, colour = cross)) + 
    geom_vline(xintercept = c(-d/2,d/2)) + # 境界を描く
    geom_hline(yintercept = c(0,2*pi)) +   # 横線を描く
    geom_point() + labs(y = expression(theta)) 
  #' 
  #' 大規模な確率シミュレーション
  mc <- 100000 # 回数を設定 
  buffon_data <- replicate(mc, buffon_trial(d, l)) 
  #'
  #' 簡単な集計
  table(buffon_data)      # 頻度 (TRUEが針の交わった回数)
  table(buffon_data)/mc   # 確率(推定値)
  print((2*l)/(pi*d)) # 針の交わる確率 (理論値)
  2*l/d/(table(buffon_data)/mc)["TRUE"] # π の推定値
  #' ---------------------------------------------------------------------------
#+end_src

** Monty Hall 問題
:PROPERTIES:
:ID:       5C7C5647-F4CD-4C51-98AF-2F77112E95E2
:END:
- 問題
  #+begin_quote
  ゲームの参加者の前に閉まった3つのドアがあって，
  1つのドアの後ろには景品の新車が，
  2つのドアの後ろには外れを意味するヤギがいる．
  参加者は新車が置かれたドアを当てると新車がもらえる．

  参加者が1つのドアを選択した後，
  司会のモンティが残りのドアのうちヤギがいるドアを開けてヤギを見せる．
  ここで参加者は，最初に選んだドアを残っているドアに変更してもよいと言われる．
  
  参加者はドアを変更すべきだろうか？
  #+end_quote

#+begin_src R :eval no :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice Monty Hole 問題
  #' 
  #' クイズに答える試行 (賞品の位置は固定して解答者をランダムに配置する場合)
  monty_trial <- function(verbose = FALSE){
    #' 賞品は1に置いてあるものとする
    choice <- sample(1:3, size = 1) # 解答者の最初の選択
    if(choice == 1) { # 変えないのが正解の場合
      win <- "stay"
      door <- sample(2:3, size = 1) # Monty が開ける扉 (2か3をランダムに選択)
    } else { # 変えるのが正解の場合
      win <- "change"
      if(choice == 2) { # 2を選択したら3を開ける
        door <- 3
      } else { # そうでなければ(3を選択)2を開ける
        door <-2 
      }
    }
    if(verbose == TRUE){ # 賞品，解答者の選択，Monty が開ける扉を返す
      return(c(prize = 1, choice = choice, door = door))
    } else { # 勝ち負けの条件を返す
      return(win)
    }
  }
  #'
  #' クイズに答える試行 (賞品と解答者をランダムに配置する場合)
  #' if 文で素朴に書くこともできるが
  #' 集合を操作する関数 setdiff(), union() を利用することができる
  #' 
  monty_trial <- function(verbose = FALSE){
    prize  <- sample(1:3, size = 1) # 賞品の置かれた扉
    choice <- sample(1:3, size = 1) # 解答者の最初の選択
    if(prize == choice) { # 変えないのが正解の場合
      win <- "stay"
      door <- sample(setdiff(1:3, prize), size = 1) # Monty が開ける扉 (ランダムに選択)
    } else { # 変えるのが正解の場合
      win <- "change"
      door <- setdiff(1:3, union(prize, choice)) # Monty が開ける扉
    }
    if(verbose == TRUE){ # 賞品，解答者の選択，Monty が開ける扉を返す
      return(c(prize = prize, choice = choice, door = door))
    } else { # 勝ち負けの条件を返す
      return(win)
    }
  }
  #'
  #' 試行を行ってみる
  monty_trial()
  monty_trial()
  #'
  #' 詳細な情報を表示する場合 (絵を描くときに用いる)
  monty_trial(verbose = TRUE)
  monty_trial(verbose = TRUE)
  #'
  #' 実験の状況を絵にしてみる
  mc <- 15
  replicate(mc, monty_trial(verbose = TRUE)) |>
    t() |> # 配列を転置
    as_tibble() |> # データフレームに変更
    rowid_to_column(var = "index") |> # 試行の番号を追加
    pivot_longer(!index) |> # index 以外を long format 化
    ggplot(aes(x = index, y = value,
               colour = name, shape = name)) +
    geom_point(size = 4) + # サイズを大きめに表示
    scale_y_continuous(breaks = 1:3)
  #'
  #' 実験とともに勝率がどのように変化するか図示してみる
  mc <- 400
  replicate(mc, monty_trial()) |>
    as_tibble_col(column_name = "win") |>
    rowid_to_column(var = "index") |>
    mutate(stay_win = win == "stay", # 留まって勝つ場合
           ratio = cumsum(stay_win)/index) |> # 勝率の推移を計算
    ggplot(aes(x = index, y = ratio)) +
    geom_line(colour = "blue") + 
    geom_hline(yintercept = 1/3, colour = "orange") + # 理論値
    ylim(c(0,1)) # y軸の描画範囲を指定
  #'
  #' 大規模な確率シミュレーション
  mc <- 50000 # 回数を設定 
  monty_data <- replicate(mc, monty_trial()) 
  #'
  #' 簡単な集計
  table(monty_data)    # 頻度
  table(monty_data)/mc # 確率(推定値)
  #'
  #' 論理式を使って書くこともできる
  #' 関数 sample(x, size) ではxに1つの数字nを渡すと
  #' 1:nと解釈されるので，以下ではxに文字を渡すようにしている
  monty_trial <- function(change = FALSE, # ドアを変えるか否か
                          verbose = FALSE){
    doors <- LETTERS[1:3]      # ドアの名前 A,B,C 
    prize <-  sample(doors, 1) # 商品のドア
    choice <- sample(doors, 1) # 選んだドア
    monty <-  sample(doors[(doors != prize) & (doors != choice)], 1) # モンティが開いたドア
    if(change){ # 選択を変えた場合の最後に選んだドア
      final <- doors[(doors != choice) & (doors != monty)]
    } else { # 選択を変えない場合
      final <- choice
    }
    if(verbose){ # TRUEの場合
      return(c(prize=prize,choice=choice,monty=monty,final=final))    
    } else {
      return(ifelse(prize == final,"win","loss"))
    }
  }
  #' 簡単な集計
  table(replicate(mc, # 最初に選んだドアのままの場合
                  monty_trial()))/mc 
  table(replicate(mc, # 選んだドアを変えた場合
                  monty_trial(change = TRUE)))/mc 
  #' ---------------------------------------------------------------------------
#+end_src

** 秘書問題 (最適停止問題)
:PROPERTIES:
:ID:       0DBFD3FC-78DC-4F06-86C6-C158412C5527
:END:
- 問題
  #+begin_quote
  以下の条件のもと秘書を1人雇うとする．
  - \(n\) 人が応募しており \(n\) は既知とする．
  - 応募者には \(1\) 位から \(n\) 位まで順位付けできる．
  - 無作為な順序で1人ずつ面接を行う．
  - 毎回の面接後その応募者を採用するか否かを決定する．
  - 不採用にした応募者を後から採用することはできない．

  "\(r-1\) 番までの応募者は採用せず，
  \(r\) 番以降の応募者でそれまで面接した中で最も良い者を採用する"
  という戦略を取るとき，最適な \(r\) はいくつだろうか?
  #+end_quote

#+begin_src R :eval no :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice 秘書問題
  #' 
  #' 秘書の採用の試行
  secretary_trial <- function(n, r, verbose = FALSE){ # nとrを指定
    applicants <- sample(1:n, size = n) # n人の順位をランダムに並べ替える
    ref <- applicants[1:(r-1)] # r-1人目までは参照(最高順位が基準点)
    test <- applicants[r:n]    # r人目以降が採用候補
    idx <- which(test < min(ref)) # 採用候補の中で基準点より良い人を選出
    if(length(idx) == 0) { # 1人も規準良い人がいない場合
      employed <- applicants[n] # 最後の人を採用
    } else {
      employed <- test[idx[1]]  # 最初に基準点を越えた人を採用
    }
    if(verbose == TRUE){ # 全順位も返す
      return(list(applicants = applicants, 
                  employed = employed)) # 2つの異なるベクトルをリストで束ねる
    } else { # 採用した者の順位のみ返す
      return(employed)
    }
  }
  #'
  #' 試行を行ってみる
  n <- 10 # 候補者は10名
  secretary_trial(n, 2, verbose = TRUE) # 2人目から採用を考える
  secretary_trial(n, 3, verbose = TRUE) # 3人目から採用を考える
  secretary_trial(n, 4, verbose = TRUE) # 4人目から採用を考える
  secretary_trial(n, 5, verbose = TRUE) # 5人目から採用を考える
  secretary_trial(n, 6, verbose = TRUE) # 6人目から採用を考える
  #'
  #' set.seed(8888) # 実験を再現したい場合はシードを指定
  mc <- 3000
  n <- 30 # 候補者数を変えて実験
  secretary_data <- tibble(r = NULL,
                    employed = NULL)
  for (r in 2:(n-1)) {
    foo <- replicate(mc, secretary_trial(n, r))
    if(r %in% c(2,6,10,14,18,22)) { # いくつか表示
      cat("採用開始: ", r, "\n")
      print(table(foo))
    }
    secretary_data <- bind_rows(secretary_data, # 前の実験結果に追加
                         tibble(r = rep(r,mc),
                                employed = foo))
  }
  #'
  #' 各rでどのような順位が採用されたか分布を図示してみる
  secretary_data |>
    ggplot(aes(x = r, y = employed)) +
    geom_boxplot(aes(group = r), # rごとに集計
                 fill = "white", colour ="royalblue") +
    labs(title = paste("n =", n)) # nをタイトルに表示
  #'
  #' 理論的に良いとされるrの値 (nが十分大きい場合)
  n/exp(1) 
  #'
  #' 各rで1位を採用できる確率を図示してみる
  secretary_data |>
    group_by(r) |> 
    summarize(ratio = mean(employed == 1)) |> # 1位ならTRUE(1)
    ggplot(aes(x = r, y = ratio)) +
    geom_step(colour = "royalblue") + # 階段関数で描画
    geom_vline(xintercept = n/exp(1), colour = "red") + # 理論値
    labs(title = paste("n =", n)) # nをタイトルに表示
  #' ---------------------------------------------------------------------------
#+end_src

** COMMENT St Petersburg のパラドックス
- 問題
  #+begin_quote
  偏りのないコインを表が出るまで投げ続け，賞金を貰うゲームを考える．
  表が出るまでにコインを投げた回数が \(n\) 回であるとき，
  貰える賞金は \(2^{n}\) 円とする． 

  このとき賞金の期待値は
  #+begin_src latex
    \begin{equation}
      \mathbb{E}[\text{賞金}]
      =2\times\frac{1}{2}
      +2^{2}\times\frac{1}{2^{2}}
      +2^{3}\times\frac{1}{2^{3}}
      +\dotsb
      =\infty
    \end{equation}
  #+end_src
  となる．

  ゲームを行う回数が有限であるとき，
  期待値はいかなるものになるだろうか?
  #+end_quote


* 次回の予定
- 独立な確率変数の性質
- 大数の法則
- 中心極限定理
- 少数の法則


* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
   
   
