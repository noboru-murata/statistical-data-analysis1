#+TITLE: データの可視化
#+SUBTITLE: 第5講 - 様々なグラフの描画
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@gmail.com
#+DATE: 
#+STARTUP: hidestars content indent
# Time-stamp: <2024-05-07 17:42:46 mura>
:REVEAL:
#+SETUPFILE: "./reveal.js/org/mycourse.org"
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
- tidyverse に全面的に修正

* 講義の内容
- 可視化の重要性
- 基本的な描画
- いろいろな分布の視覚化
- 比率の視覚化
- 多次元データの視覚化

#+begin_src R :exports none :tangle no
  setwd("~/Desktop/lectures/u-tokyo/spring/course")
#+end_src

#+begin_src R :exports none
  ### 第5講 サンプルコード
#+end_src



* 可視化の重要性
** データの可視化
- データ全体の特徴や傾向を把握するための直感的で効果的な方法
- R言語には極めて多彩な作図機能が用意されている
  - *base R* : ~package::graphics~ (標準で読み込まれる)
  - *tidyverse* : ~package::ggplot2~
- 描画関連の関数は色，
  線種や線の太さ，
  図中の文字の大きさなどを指定することができる

** COMMENT 可視化のための機能
- データの特徴や傾向を把握するために効果的
- Rはきわめて多彩な作図機能を持つ
- ~package::graphics~ 
  に含まれる代表的な描画関数を取り上げて解説する
  - 描画関連の関数は色，
    線の種類や太さ，
    あるいは図中の文字の大きさなどを指定することができる
  - 用意されている多彩なオプションは説明しきれないため，
    必要に応じて
    関数 ~help()~ (ヘルプ)と
    関数 ~example()~ (例題)
    を参照のこと

** 'tidyverse' パッケージ
- データ操作とグラフィクスの拡張 (再掲)
  - *tidyverse* : Hadley Wickham @posit による拡張パッケージ集
    - https://www.tidyverse.org/packages/
    - https://tidyverse.tidyverse.org/
- パッケージ集の利用には以下が必要 
  #+begin_src R :exports code
    #' 最初に一度だけ以下のいずれかを実行しておく
    #'  - Package タブから tidyverse をインストール
    #'  - コンソール上で次のコマンドを実行 'install.packages("tidyverse")'
    #' tidyverse パッケージの読み込み
    library(tidyverse)
  #+end_src


- グラフィクスの拡張である ~ggplot2~ を利用
** サンプルデータの説明
- ~jpdata[1-3].csv~ (再掲)
  #+begin_quote
  - https://www.e-stat.go.jp (統計局)
    - 地域から探す / 全県を選択 / 項目を選択してダウンロード
    - 日本語が扱えることを想定して日本語を含んでいる
    - 英語のために -en を用意
  - データファイル (文字コード : utf8)
    - jpdata1.csv : 県別の対象データ
    - jpdata2.csv : 対象データの内容説明
    - jpdata3.csv : 県と地域の対応関係
  #+end_quote
  - 作業ディレクトリのdata内に置いて読み込む場合
    #+begin_src R :exports code
      jp_data <- read_csv(file = "data/jpdata1.csv")
      jp_item <- read_csv(file = "data/jpdata2.csv")
      jp_area <- read_csv(file = "data/jpdata3.csv")
    #+end_src
    - 変数名は自由に付けてよい

#+reveal: split 
- ~tokyo_weather.csv~ (~tokyo.zip~ の中)
  #+begin_quote
  - [[https://www.jma.go.jp]] (気象庁)
    - 各種データ・資料 / 過去の地点気象データ・ダウンロード
    - 地点 / 項目 / 期間を選択してダウンロード
    - ダウンロードしたものを必要事項のみ残して整理
  - データ項目
    平均気温(℃),降水量の合計(mm),合計全天日射量(MJ/㎡),降雪量合計(cm),最多風向(16方位),平均風速(m/s),平均現地気圧(hPa),平均湿度(％),平均雲量(10分比),天気概況(昼：06時〜18時),天気概況(夜：18時〜翌日06時)
  #+end_quote
  - 作業ディレクトリのdata内に置いて読み込む場合
    #+begin_src R :exports code
      tw_data <- read_csv(file = "data/tokyo_weather.csv")
    #+end_src

#+reveal: split
- ~tokyo_covid19_2021.csv~ (~tokyo.zip~ の中)
  #+begin_quote
  - [[https://stopcovid19.metro.tokyo.lg.jp]] (東京都)
  - データ項目
    陽性者数, 総検査実施件数, 発熱等相談件数
  #+end_quote
  - 作業ディレクトリのdata内に置いて読み込む場合
    #+begin_src R :exports code
      tc_data <- read_csv(file="data/tokyo_covid19_2021.csv")
    #+end_src


* 描画の基礎
** COMMENT データの可視化
- データ全体の特徴や傾向を把握するための直感的で効果的な方法
- R言語には極めて多彩な作図機能が用意されている
  - *base R* : ~package::graphics~ (標準で読み込まれる)
  - *tidyverse* : ~package::ggplot2~
- 描画関連の関数は色，
  線種や線の太さ，
  図中の文字の大きさなどを指定することができる

** 描画の初期化
:PROPERTIES:
:END:
- ~package::ggplot2~ ではさまざまな作図関数を演算子 ~+~ で追加しながら描画する
  #+begin_src R :eval no :tangle no
    初期化のための関数 + 
      作図のための関数 + ... +
      装飾のための関数 + ... # 関数が生成するオブジェクトに変更分を随時追加する
  #+end_src
- 関数 ~ggplot2::ggplot()~ : 初期化
  #+begin_src R :eval no :tangle no
    ggplot(data = NULL, mapping = aes(), ..., environment = parent.frame())
    #' data: データフレーム
    #' mapping: 描画の基本となる"審美的マップ"(xy軸，色，形，塗り潰しなど)の設定
    #' environment: 互換性のための変数(廃止)
    #' 詳細は '?ggplot2::ggplot' を参照
  #+end_src

** 折線グラフ
:PROPERTIES:
:END:
- 関数 ~ggplot2::geom_line()~ : 線の描画
  #+begin_src R :eval no :tangle no
    geom_line(
      mapping = NULL,
      data = NULL,
      stat = "identity",
      position = "identity",
      ...,
      na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE
    )
    #' mapping: "審美的"マップの設定
    #' data: データフレーム
    #' stat: 統計的な処理の指定
    #' position: 描画位置の調整
    #' ...: その他の描画オプション
    #' na.rm: NA(欠損値)の削除(既定値は削除しない)
    #' show.legend: 凡例の表示(既定値は表示)
    #' 詳細は '?ggplot2::geom_line' を参照
  #+end_src

#+reveal: split
- [[color:green][東京の5月の気温と日射量の推移]]
  #+begin_src R :exports none
    #' @exercise 折れ線グラフの描画
    #' 東京の5月の気温と日射量の推移
  #+end_src
  #+begin_src R :file figs/05-geomline-geomline.png :results graphics
    tw_data |> filter(month == 5) |> # 5月を抽出
      ggplot(aes(x = day)) + # day をx軸に指定
      geom_line(aes(y = temp), colour = "blue") + # 気温を青
      geom_line(aes(y = solar), colour = "red") + # 日射量を赤
      labs(y = "temp.(blue) / solar rad.(red)") # y軸のラベルを変更 
  #+end_src
  #+name:   fig:05-geomline-geomline
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geomline-geomline.png]]

** データフレームの形の変更
- 関数 ~dplyr::pivot_longer()~ : 列の集約
  #+begin_src R :eval no :tangle no
    pivot_longer(
      data,
      cols,
      ...,
      cols_vary = "fastest",
      names_to = "name", names_prefix = NULL, names_sep = NULL, names_pattern = NULL,
      names_ptypes = NULL, names_transform = NULL, names_repair = "check_unique",
      values_to = "value", values_drop_na = FALSE, values_ptypes = NULL,
      values_transform = NULL
    )
    #' data: データフレーム
    #' cols: 操作の対象とする列(列の番号，名前，名前に関する条件式など)
    #' names_to: 対象の列名をラベルとする新しい列の名前(既定値は"name")
    #' values_to: 対象の列の値を保存する新しい列の名前(既定値は"value")
    #' 詳細は '?dplyr::pivot_longer' を参照
  #+end_src
  - 列ごとのグラフを視覚化する際に多用する

#+reveal: split
- [[color:green][東京の5月の気温と日射量の推移]] 
  #+begin_src R :exports none
    #' 前例の別の書き方
  #+end_src
  #+begin_src R :file figs/05-geomline.png :results graphics
    tw_data |> filter(month == 5) |>
      pivot_longer(c(temp, solar)) |> # 集約する列を指定
      ggplot(aes(x = day, y = value, colour = name)) + 
      geom_line() + # index ごとに定義されたカラーパレットの異なる色が用いられる
      labs(title = "Weather in May")
  #+end_src
  #+begin_src R :eval no :exports none
    #' @notes
    #' 描画に必要な情報は ggplot の中で指定されるが
    #' 以下のように必要な列を選択してもよい
    tw_data |> filter(month == 5) |> select(c(day, temp, solar)) |>
      pivot_longer(!day) |> # day 以外の列を集約
      ggplot(aes(x = day, y = value, colour = name)) +
      geom_line() + labs(title = "Weather in May")
    #' 色は theme で設定されているカラーパレットに従って自動的に選択されるが
    #' 自身で設定することも可能．詳細は例えば以下を参照
    #' https://ggplot2-book.org/scales-colour
  #+end_src
  #+name:   fig:05-geomline
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geomline.png]]

#+reveal: split
- [[color:green][個別のグラフでの描画]]
  #+begin_src R :file figs/05-geomline-facetgrid.png :results graphics
    tw_data |> filter(month == 5) |> 
      pivot_longer(c(temp, solar)) |> 
      ggplot(aes(x = day, y = value, colour = name)) +
      geom_line(show.legend  =  FALSE) + # 凡例は不要なので消す
      labs(title = "Weather in May") +
      facet_grid(rows = vars(name)) # name ごとに行に並べる (rowsは省略可)
  #+end_src
  #+begin_src R :eval no :exports none
    #' @notes
    #' 属性ごとに描いた異なるグラフを並べる場合には
    #' 関数 ggplot2::facet_grid() (属性ごとに行・列を構成)や
    #' 関数 ggplot2::facet_wrap() (行数・列数を指定)を用いる
    foo <- # 基本となるグラフオブジェクトを保存
      tw_data |> filter(month %in% c(5,6,7,8)) |>
      select(c(month, day, temp, solar, wind)) |>
      pivot_longer(!c(month, day)) |> 
      ggplot(aes(x = day, y = value, colour = name)) +
      geom_line(show.legend  =  FALSE) 
    foo + facet_grid(rows = vars(name), cols = vars(month)) 
    foo + facet_grid(name ~ month) # 同上
    foo + facet_wrap(vars(name, month), nrow = 4, ncol = 3) # 4x3 に並べる
    foo + facet_wrap(name ~ month, nrow = 4, ncol = 3) # 同上
  #+end_src
  #+name:   fig:05-geomline-facetgrid
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geomline-facetgrid.png]]

** COMMENT 基本的な描画 (関数)
- 1変数関数の範囲を指定して描画
  #+BEGIN_SRC R :exports code
    curve(fun,from=NULL,to=NULL, ...)
    #' fun: 1変数関数
    #' from: x軸の左端
    #' to: x軸の右端
    #' ...: "ベクトルの描画"と同じオプションが利用可能
    
    plot(fun, y=0, to=1, ...)
    #' curveとほぼ同様
    #' y: x軸の左端 (from=と書いても良い)
    
    #' 別の関数 f を重ね書きする場合
    curve(...,add=TRUE, ...)            
    plot(...,add=TRUE, ...)            
  #+END_SRC

** 図の保存
- RStudioの機能を使う (少数の場合はこちらが簡便)
  - 右下ペイン *Plots* タブから *Export* をクリック
  - 形式やサイズを指定する
  - クリップボードにコピーもできる
- 関数 ~ggsave()~ : 図の保存
  #+begin_src R :eval no :tangle no
    ggsave(
      filename,
      plot = last_plot(),
      device = NULL,
      path = NULL, scale = 1, width = NA, height = NA,
      units = c("in", "cm", "mm", "px"), dpi = 300, limitsize = TRUE, bg = NULL,
      ...
    )
    #' filename: ファイル名
    #' plot: 保存する描画オブジェクト
    #' device: 保存する形式("pdf","jpeg","png"など)
    #' 詳細は"?ggplot2::ggsave"を参照
  #+end_src

** COMMENT 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       2D3E0D02-8142-423C-9683-1F8CC925991F
:END:
- ~pcr_case_daily.csv~ を用いて以下の描画を行いなさい
  - 検疫所 (~b~)，地方衛生研究所.保健所 (~c~)，民間検査会社 (~d~) における
    検査件数の推移
  - 民間検査会社 (~d~)，大学等 (~e~)，医療機関 (~f~) での
    検査件数の関係 (散布図)

#+begin_src R :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 基本的なグラフの描画
  #' (書き方はいろいろあるので，以下はあくまで一例)
#+end_src
#+begin_src R :eval no :exports none
  #' 検疫所(ciq)，地方衛生研究所.保健所(hc)，行政検査(ai)における検査件数の推移
  pcr_data |>
    select(c(date,ciq,hc,ai)) |> # 描画対象の列を抽出
    pivot_longer(!date, names_to = "organ", values_to = "nums") |> # 
    ggplot(aes(x = date, y = nums, colour = organ)) +
    geom_line() +
    labs(x = "日付", y = "検査件数")
  #' y軸を対数表示にする場合は以下のとおり
  pcr_data |>
    select(c(date,ciq,hc,ai)) |> # 描画対象の列を抽出
    pivot_longer(!date, names_to = "organ", values_to = "nums") |> # 
    ggplot(aes(x = date, y = nums, colour = organ)) +
    geom_line() +
    scale_y_log10() + # y軸を対数表示 (log10(0)=-Inf の警告が出る場合がある)
    labs(x = "日付", y = "検査件数")
  #' 行政検査(ai)，大学等(univ)，医療機関(mi)での検査件数の関係(散布図)
  pcr_data |>
    select(c(ai,univ,mi)) |> # 描画対象の列を抽出
    ggpairs(columnLabels = pcr_colnames[c("ai","univ","mi")]) # ラベルを渡す
#+end_src
#+begin_src R :exports none
  #' ---------------------------------------------------------------------------
#+end_src


* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~tokyo_weather.csv~ (東京都の気候データ)
  を用いて以下の問に答えよ
  - 6月の気温と湿度の折線グラフを描け
  - 1年間の気温と湿度の折線グラフを描け
  - 各月の平均気温と湿度の折線グラフを描け
  - (参考) 読み込み方
    #+begin_src R :eval no :tangle no
      #' CSVファイルは作業ディレクトリの下の data サブディレクトリにあるとする
      tw_data <- read_csv(file = "data/tokyo_weather.csv")
    #+end_src

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 基本的なグラフの描画
  #' 
  #' データの読み込み
  tw_data <- read_csv(file = "data/tokyo_weather.csv")
  #'
  #' 6月の気温と湿度の折線グラフ
  #' 同じグラフに描いてみる
  tw_data |>
    filter(month == 6) |> # 6月を選択
    select(c(day, temp, humid)) |> # 必要な列を選択
    pivot_longer(!day) |> # long format に変換
    ggplot(aes(x = day, y = value, colour = name)) + # 審美的属性を指定
    geom_line() # 折線グラフの描画
  #' 物理的に異なる量なので facet を分ける
  tw_data |>
    filter(month == 6) |> 
    select(c(day, temp, humid)) |> 
    pivot_longer(!day, names_to = "index") |> # 列名を "index" に変更
    ggplot(aes(x = day, y = value, colour = index)) + # こちらも "index"
    geom_line() + # 凡例も "index" になっている
    facet_grid(rows = vars(index)) # index ごとに facet を行に並べる
  #' 値域が異なるので facet ごとにy軸を調整する
  tw_data |>
    filter(month == 6) |> 
    select(c(day, temp, humid)) |> 
    pivot_longer(!day, names_to = "index") |> 
    ggplot(aes(x = day, y = value, colour = index)) +
    geom_line() +
    facet_grid(rows = vars(index),
               scales = "free_y") # y軸を個別に自動調整
  #' 不要な凡例の削除とタイトルの追加
  tw_data |>
    filter(month == 6) |> 
    pivot_longer(c(temp, humid)) |> # 集約する列を指定(余計な列も存在)
    ggplot(aes(x = day, y = value, colour = name)) +
    geom_line(show.legend = FALSE) + # 凡例の削除
    facet_grid(rows = vars(name), scales = "free_y") +
    labs(title = "Weather in June") # タイトルの追加
  #'
  #' 1年間の気温と湿度の折線グラフ
  tw_data |>
    select(c(temp, humid)) |> # 必要な列を抽出
    rowid_to_column(var = "day") |> # 行番号を ID として列 day を作る
    pivot_longer(!day) |> 
    ggplot(aes(x = day, y = value, colour = name)) +
    geom_line(show.legend = FALSE) +
    facet_grid(rows = vars(name), scales = "free_y") +
    labs(title = "Weather in Tokyo") 
  #' x軸として日付を用いる
  tw_data |>
    mutate(date = as_date(paste(year, month, day, sep = "-"))) |> # 日付
    select(c(date, temp, humid)) |> # 必要な列を抽出
    pivot_longer(!date) |> 
    ggplot(aes(x = date, y = value, colour = name)) +
    geom_line(show.legend = FALSE) +
    facet_grid(rows = vars(name), scales = "free_y") +
    labs(title = "Weather in Tokyo") 
  #'
  #' 各月の平均気温と湿度の折線グラフを描け
  tw_data |>
    group_by(month) |> # 月毎にまとめる
    summarize(across(c(temp, humid), mean)) |> # 目的の指標を集計
    pivot_longer(!month) |> 
    ggplot(aes(x = month, y = value, colour = name)) +
    geom_line(show.legend = FALSE) +
    facet_grid(vars(name), scales = "free_y") +
    labs(title = "Weather in Tokyo") 
  #' x軸の目盛を指定
  tw_data |>
    group_by(month) |> 
    summarize(across(c(temp, humid), mean)) |>
    pivot_longer(!month) |> 
    ggplot(aes(x = month, y = value, colour = name)) +
    geom_line(show.legend = FALSE) +
    facet_grid(vars(name), scales = "free_y") +
    scale_x_continuous(breaks = 1:12) + # 1:12 の目盛を描く
    labs(title = "Weather in Tokyo") 
  #' ---------------------------------------------------------------------------
#+end_src
       
** COMMENT 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~sleep~ データ
  (睡眠薬投与による睡眠時間の増減のデータ・詳細はhelp(sleep)参照)
  において，
  ~group~ が1のデータの ~extra~ を \(x\) 軸，
  ~group~ が2のデータの ~extra~ を \(y\) 軸とした
  散布図を描画せよ．
  ただし，点の色は青，点の形は \(\times\) とし，
  タイトルを"Sleep data"，
  \(x\) 軸のラベルを"group 1"，
  \(y\) 軸のラベルを"group 2"
  とせよ．\(x\) 軸, \(y\) 軸のデータはそれぞれ
  #+begin_src R :exports none
    x <- subset(sleep,group==1,extra,drop=TRUE) 
    y <- subset(sleep,group==2,extra,drop=TRUE)
  #+end_src
  としてつくるとよい．


* 散布図の描画
** 散布図
:PROPERTIES:
:ID:       E8AFEF95-4881-4872-A2EB-435C220102D0
:END:
- 関数 ~ggplot2::geom_point()~ : 点の描画
  #+begin_src R :eval no :tangle no
    geom_point(
      mapping = NULL,
      data = NULL,
      stat = "identity",
      position = "identity",
      ...,
      na.rm = FALSE, show.legend = NA, inherit.aes = TRUE
    )
    #' mapping: 審美的マップの設定
    #' data: データフレーム
    #' stat: 統計的な処理の指定
    #' position: 描画位置の調整
    #' ...: その他の描画オプション
    #' na.rm: NA(欠損値)の削除(既定値は削除しない)
    #' show.legend: 凡例の表示(既定値は表示)
    #' 詳細は '?ggplot2::geom_point' を参照
  #+end_src

#+reveal: split
- [[color:green][夏季の日射量と気温の関係]]
  #+begin_src R :exports none
    #' @exercise 散布図の描画
    #' 夏季の日射量と気温の関係
  #+end_src
  #+begin_src R :file figs/05-geompoint.png :results graphics :tangle yes
    tw_data |> filter(month %in% 7:9) |> # 7月-9月を抽出
      ggplot(aes(x = solar, y = temp)) + # x軸を日射量，y軸を気温に設定
      geom_point(colour = "blue", shape = 19) + # 色と形を指定(点の形は '?points' を参照)
      labs(x = "solar radiation", y = "temperature") # 軸の名前を指定
  #+end_src
  #+name:   fig:05-geompoint
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geompoint.png]]

#+reveal: split
- [[color:green][湿度の情報を追加]]
  #+begin_src R :exports none
    #' 湿度の情報を点のサイズとして追加
  #+end_src
  #+begin_src R :file figs/05-geompoint-size.png :results graphics :tangle yes
    tw_data |> filter(month %in% 7:9) |> 
      ggplot(aes(x = solar, y = temp, size = humid)) + # 湿度を点の大きさで表示
      geom_point(colour = "blue", shape = 19) + 
      labs(x = "solar radiation", y = "temperature")
  #+end_src
  #+name:   fig:05-geompoint-size
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geompoint-size.png]]

#+reveal: split
- [[color:green][各軸を対数表示]]
  #+begin_src R :exports none
    #' 各軸を対数表示に変更
  #+end_src
  #+begin_src R :file figs/05-geompoint-scalelog.png :results graphics :tangle yes
    tw_data |> filter(month %in% 7:9) |> 
      ggplot(aes(x = solar, y = temp, size = humid)) + 
      geom_point(colour = "blue", shape = 19) + 
      labs(x = "solar radiation", y = "temperature") +
      scale_x_log10() + scale_y_log10() # x軸，y軸を対数表示
  #+end_src
  #+name:   fig:05-geompoint-scalelog
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geompoint-scalelog.png]]
  
** 散布図行列
:PROPERTIES:
:ID:       67F7D346-1A96-43F6-8E5C-263BBEEBE364
:END:
- 複数の散布図を行列状に配置したもの
- 関数 GGally::ggpairs() : 散布図行列の描画
  #+begin_src R :eval no :tangle no
    #' 必要であれば 'install.packages("GGally")' を実行
    library(GGally) # パッケージのロード
    ggpairs(
      data, mapping = NULL,
      columns = 1:ncol(data),
      upper = list(continuous = "cor", combo = "box_no_facet", discrete = "count", na = "na"),
      lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na"),
      diag = list(continuous = "densityDiag", discrete = "barDiag", na = "naDiag"),
      ...,
      axisLabels = c("show", "internal", "none"),
      columnLabels = colnames(data[columns]),
      legend = NULL
    )
    #' columns: 表示するデータフレームの列を指定
    #' upper/lower/diag: 行列の上三角・下三角・対角の表示内容を設定
    #' axisLabels: 各グラフの軸名の扱い方を指定
    #' columnLabels: 表示する列のラベルを設定(既定値はデータフレームの列名)
    #' legend: 凡例の設定(どの成分を使うか指定)
    #' 詳細は '?GGally::ggpairs' を参照
  #+end_src

#+reveal: split
- [[color:green][気温と日射量と湿度の関係を視覚化]]
  #+begin_src R :exports none
    #' @exercise 散布図行列の描画
    #' 夏季の気温と日射量と湿度の関係
    library(GGally)
  #+end_src
  #+begin_src R :file figs/05-ggpairs.png :results graphics
    tw_data |> filter(month %in% 7:9) |> 
      select(c(temp, solar, humid)) |> # 必要な列を選択
      ggpairs() # 標準の散布図行列 (上三角は相関，対角は密度，下三角は散布図)
  #+end_src
  #+name:   fig:05-ggpairs
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-ggpairs.png]]

#+reveal: split
- [[color:green][月ごとに情報を整理]]
  #+begin_src R :exports none
    #' 月ごとに色分けして表示する
  #+end_src
  #+begin_src R :file figs/05-ggpairs-quarter.png :results graphics
    tw_data |> filter(month %in% 7:9) |> select(c(month, temp, solar, humid)) |>
      mutate(month = as_factor(month)) |> # 月を因子化(ラベルとして扱う)
      ggpairs(columns = 2:4, legend = c(1,1), # 表示する列．凡例の雛型
              aes(colour = month), # 月ごとに色づける
              diag = list(continuous = "barDiag")) + # 対角をヒストグラム
      theme(legend.position = "top") # 凡例(上で指定した1行1列の凡例)の位置
  #+end_src
  #+begin_src R :eval no :exports none
    #' @notes
    #' 事例ベースの使い方は以下のコマンドで見ることができる
    vig_ggally("ggpairs")
  #+end_src
  #+name:   fig:05-ggpairs-quarter
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-ggpairs-quarter.png]]

** 対話型のグラフ
- ~ggplot2~ で描画したグラフは
  対話型 (interactive) のグラフに変換することができる
- 変換には ~package::plotly~ が必要 
  #+begin_src R :exports code
    #' 最初に一度だけ以下のいずれかを実行しておく
    #'  - Package タブから plotly をインストール
    #'  - コンソール上で次のコマンドを実行 'install.packages("plotly")'
    #' plotly パッケージの読み込み
    library(plotly)
  #+end_src

#+reveal: split
- 関数 ~plotly::ggplotly()~ : 対話型への変換
  #+begin_src R :eval no :tangle no
    ggplotly(
      p = ggplot2::last_plot(),
      width = NULL, height = NULL, tooltip = "all", dynamicTicks = FALSE,
      layerData = 1, originalData = TRUE, source = "A",
      ...
    )
    #' p: ggplot オブジェクト
    #' 詳細は '?plotly::ggplotly' を参照
    #' https://plotly.com/ggplot2/
  #+end_src

#+reveal: split
- [[color:green][前出のグラフの変換例]]
  #+begin_src R :exports none
    #' @exercise 対話型のグラフへの変換
  #+end_src
  #+begin_src R :eval no :exports code
    #' 5月の気温と日射量の例
    tw_data |> filter(month == 5) |> select(c(day, temp, solar)) |>
      pivot_longer(!day, names_to = "index") |> 
      ggplot(aes(x = day, y = value, colour = index)) +
      geom_line() + labs(title = "Weather in May")
    ggplotly() # 最後に描いた ggplot オブジェクトを変換して 右下 Viewer タブに表示
  #+end_src
  #+begin_src R :eval no :exports code
    #' 夏季の日射量と温度と湿度の例
    bar <- # ggplot オブジェクトを保存
      tw_data |> filter(month %in% 7:9) |> 
      ggplot(aes(x = solar, y = temp, size = humid,
                 text = paste0("date: ", month, "/", day))) + # 日付を付加
      geom_point(colour = "blue", shape = 19) + 
      labs(x = "solar radiation", y = "temperature")
    ggplotly(bar) # 保存した ggplot オブジェクトを変換
  #+end_src

** 日本語に関する注意 (主にmacOS)
- 日本語を含む図で文字化けが起こる場合がある 
- 以下のように日本語フォントを指定する必要がある
  #+begin_src R :eval no :tangle no
    if(Sys.info()["sysname"] == "Darwin") { # macOS か調べる
      #' OS標準のヒラギノフォントを指定する場合
      theme_update(text = element_text(family = "HiraginoSans-W4"))
      #' gome_text/geom_label内で用いられる日本語フォントの指定
      update_geom_defaults("text", list(family = theme_get()$text$family))
      update_geom_defaults("label", list(family = theme_get()$text$family))}
  #+end_src
  - 以下のサイトなども参考になる \\
    https://oku.edu.mie-u.ac.jp/~okumura/stat/font.html


* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~jpdata1/3.csv~ (前回配布のデータ)を用いて以下の問に答えよ．
  - 人口1000人あたりの婚姻・離婚数の散布図を描け．
  - 地方別に異なる点の形状を用いた散布図を描け．
  - それ以外にも様々な散布図を描画してみよう．
  - (参考) 読み込み方
    #+begin_src R :eval no :tangle no
      #' CSVファイルは作業ディレクトリの下の data サブディレクトリにあるとする
      jp_data <- read_csv(file = "data/jpdata1.csv")
      jp_area <- read_csv(file = "data/jpdata3.csv")
    #+end_src

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 散布図の描画
  #' 
  #' データの読み込み
  jp_data <- read_csv(file = "data/jpdata1.csv")
  jp_area <- read_csv(file = "data/jpdata3.csv")
  #'
  #' @notes
  #' 日本語を用いる場合は macOS ではフォントの指定が必要
  if(Sys.info()["sysname"] == "Darwin") { # macOS か調べて日本語フォントを指定
    theme_update(text = element_text(family = "HiraginoSans-W4"))
    update_geom_defaults("text", list(family = theme_get()$text$family))
    update_geom_defaults("label", list(family = theme_get()$text$family))}
  #'
  #' 単純な散布図
  jp_data |> # データフレームを指定
    ggplot(aes(x = 婚姻, y = 離婚)) + # xy軸を設定
    geom_point(colour = "blue", # 表示する色
               shape = 19)      # 表示する形．'?graphics::points' を参照
  #' 軸やタイトルを変更
  jp_data |> 
    ggplot(aes(x = 婚姻, y = 離婚)) + 
    geom_point(colour = "blue", 
               shape = 19) +    
    labs(x = "1000人あたりの婚姻数",      # x軸のラベル
         y = "1000人あたりの離婚数",      # y軸のラベル
         title = "婚姻数と離婚数の散布図") # タイトル
  #' 県名を追加
  jp_data |> 
    ggplot(aes(x = 婚姻, y = 離婚)) + 
    geom_point(colour = "blue",
               shape = 19) + 
    geom_text(aes(label = 県名), # ラベルとして県名を指定
              size = 3,         # サイズは適宜調整
              vjust = -1) +     # ラベルに位置(縦)の調整  
    labs(x = "1000人あたりの婚姻数",
         y = "1000人あたりの離婚数",
         title = "婚姻数と離婚数の散布図")
  #'
  #' 地方ごとに色と点の形を変える
  jp_data |> 
    mutate(地方 = as_factor(jp_area[["地方"]])) |> # 地方区分を追加
    ggplot(aes(x = 婚姻, y = 離婚)) + 
    geom_point(aes(colour = 地方,   # 地方ごとに色を変える
                   shape = 地方)) + # 地方ごとに形を変える
    geom_text(aes(label = 県名), 
              size = 2,
              vjust = -1) +
    labs(x = "1000人あたりの婚姻数",
         y = "1000人あたりの離婚数",
         title = "婚姻数と離婚数の散布図")
  #' @notes
  #' shape 属性は6種類までが推奨されている．
  #' そのままでは表示されないが，手動で設定すれば表示される
  ggplot2::last_plot() + # 最後に描いたグラフオブジェクトに追加
    scale_shape_manual(values = 1:8) # 形は '?points' を参照
  #' @notes
  #' 図中に入れる文字を自動的に調整するパッケージもある
  #' 重なりが多いところはラベルを削除するので注意は必要
  library(ggrepel)
  if(Sys.info()["sysname"] == "Darwin") { # maxOS のための日本語フォントの設定
    update_geom_defaults("text_repel", list(family = theme_get()$text$family))
    update_geom_defaults("label_repel", list(family = theme_get()$text$family))}
  jp_data |> 
    mutate(地方 = as_factor(jp_area[["地方"]])) |>
    ggplot(aes(x = 婚姻, y = 離婚)) + 
    geom_point(aes(colour = 地方,
                   shape = 地方)) +
    geom_text_repel(aes(label = 県名), # geom_text の拡張
                    size = 2) +       # サイズは適宜調整 
    labs(x = "1000人あたりの婚姻数",
         y = "1000人あたりの離婚数",
         title = "婚姻数と離婚数の散布図")
  #' 上記と同様に shape については警告が出る
  ggplot2::last_plot() + 
    scale_shape_manual(values = LETTERS) # 文字を指定することもできる
  #' ---------------------------------------------------------------------------
#+end_src
       

* さまざまなグラフ
** ヒストグラム
:PROPERTIES:
:ID:       011F7281-6002-43B9-9893-479D5DD5CB3C
:END:
- データの値の範囲をいくつかの区間に分割し，
  各区間に含まれるデータの個数を棒グラフにした図
  - 棒グラフの幅が区間, 面積が区間に含まれるデータの個数に比例するようにグラフを作成
  - データ分布の可視化に有効(値の集中とばらつきを調べる)
- 関数 ~ggplot2::geom_histogram()~ : 
  #+begin_src R :eval no :tangle no
    geom_histogram(
      mapping = NULL, data = NULL, stat = "bin", position = "stack",
      ...,
      binwidth = NULL,
      bins = NULL,
      na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TREU
    )
    #' binwidth: ヒストグラムのビンの幅を指定
    #' bins: ヒストグラムのビンの数を指定
    #' 詳細は '?ggplot2::geom_histogram' を参照
  #+end_src

#+reveal: split
- [[color:green][日射量の分布]]
  #+begin_src R :exports none
    #' @exercise ヒストグラムの描画
    #' 各日の全天日射量の頻度分布
  #+end_src
  #+begin_src R :file figs/05-geomhistogram.png :results graphics
    tw_data |>
      ggplot(aes(x = solar)) + # 分布を描画する列を指定
      geom_histogram(bins = 30, fill = "pink", colour = "red") +
      labs(x = expression(MJ/m^2), # 数式の表示は '?plotmath' を参照
           title = "Solar Radiation in Tokyo")
  #+end_src
  #+begin_src R :eval no :exports none
    #' @notes
    #' 関数 geom_text() を用いて各ビンの頻度を表示することができる
    tw_data |>
      ggplot(aes(x = solar)) + 
      geom_histogram(bins = 30, fill = "pink", colour = "red") +
      geom_text(stat="bin", bins = 30, colour = "darkblue", size = 3, 
                aes(label = after_stat(count), y = after_stat(count) + 1)) +
      labs(x = expression(paste("intensity [",MJ/m^2,"]")), # 文字列と数式を結合
           y = "frequency", # geom_text で y軸のラベルが書き換えられるため
           title = "Solar Radiation in Tokyo")
  #+end_src
  #+name:   fig:05-geomhistogram
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geomhistogram.png]]
  
** 密度
- データからカーネル法で確率密度を推定した図
  - ヒストグラム同様データ分布の可視化に有効
  - カーネルの幅や関数も選択可能
- 関数 ~ggplot2::geom_density()~ : 
  #+begin_src R :eval no :tangle no
    geom_density(
      mapping = NULL, data = NULL, stat = "density", position = "identity",
      ...,
      na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE,
      outline.type = "upper"
    )
    #' 詳細は '?ggplot2::geom_density' を参照
    #' カーネルの幅や関数については '?stat::density' を参照
    #' bw: カーネルの幅の計算方法 "nrd0", "ucv" など
    #' kernel: カーネル関数 "gaussian", "epanechnikov" など
  #+end_src

#+reveal: split
- [[color:green][日射量の分布]]
  #+begin_src R :exports none
    #' @exercise 密度の描画
    #' 各日の全天日射量の密度推定
  #+end_src
  #+begin_src R :file figs/05-geomdensity.png :results graphics
    tw_data |>
      ggplot(aes(x = solar)) + 
      geom_density(fill = "pink", colour = "red") + 
      labs(x = expression(MJ/m^2), 
           title = "Solar Radiation in Tokyo")
  #+end_src
  #+begin_src R :eval no :exports none
    #' @notes
    #' 関数 geom_function() を用いて理論曲線と比較することができる
    tw_data |>
      ggplot(aes(x = solar)) + 
      geom_density(fill = "pink", colour = "red") +
      geom_function(fun = dnorm, # 正規分布と比較
                    args = with(tw_data, # 標本平均と標準偏差を計算
                                list(mean = mean(solar),
                                     sd = sd(solar))),
                    color = "blue") + # 色を指定
      labs(x = expression(paste("intensity [",MJ/m^2,"]")),
           y = "density", # geom_function で y軸のラベルが書き換えられるため
           title = "Solar Radiation in Tokyo")
    #' ヒストグラムも理論曲線と重ねることができるが，
    #' 標準ではy軸は頻度なので，以下のように書き換える必要がある
    tw_data |>
      ggplot(aes(x = solar)) + 
      geom_histogram(aes(y = after_stat(density)), # y軸を密度表示
                    bins = 30, fill = "pink", colour = "red") +
      geom_function(fun = dnorm, # 正規分布と比較
                    args = with(tw_data, # 標本平均と標準偏差を計算
                                list(mean = mean(solar),
                                     sd = sd(solar))),
                    color = "blue") + # 色を指定
      labs(x = expression(paste("intensity [",MJ/m^2,"]")),
           y = "density", # geom_function で y軸のラベルが書き換えられるため
           title = "Solar Radiation in Tokyo")
  #+end_src
  #+name:   fig:05-geomdensity
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geomdensity.png]]
  
** 箱ひげ図
:PROPERTIES:
:ID:       D83D77F9-3BDC-432E-97E3-B22B9C8772F4
:END:
- データの散らばり具合を考察するための図
  - 長方形の辺は四分位点(下端が第1，中央が第2，上端が第3)
  - 中央値から第1四分位点・第3四分位点までの1.5倍以内にあるデータの
    最小の値・最大の値を下端・上端とする線(ひげ)
  - ひげの外側の点は外れ値
  # - 複数のデータの分布の比較の際に有効
- 関数 ~ggplot2::geom_boxplot()~ :
  #+begin_src R :eval no :tangle no
    geom_boxplot(
      mapping = NULL, data = NULL, stat = "boxplot", position = "dodge2",
      ...,
      outlier.colour = NULL, outlier.color = NULL, outlier.fill = NULL,
      outlier.shape = 19, outlier.size = 1.5, outlier.stroke = 0.5, outlier.alpha = NULL,
      notch = FALSE, notchwidth = 0.5, varwidth = FALSE,
      na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE
    )
    #' ourlier.*: 外れ値の描画方法の指定
    #' notch*: ボックスの切れ込みの設定
    #' varwidth: ボックスの幅でデータ数を表示
    #' 詳細は '?ggplot2::geom_boxplot' を参照
  #+end_src

#+reveal: split
- [[color:green][月ごとの日射量の分布(分位点)]]
  #+begin_src R :exports none
    #' @exercise 箱ひげ図の描画
    #' 月ごとの日射量の分布
  #+end_src
  #+begin_src R :file figs/05-geomboxplot.png :results graphics
    tw_data |>
      mutate(month = as_factor(month)) |> # 月を因子化
      ggplot(aes(x = month, y = solar)) + # 月毎に集計する
      geom_boxplot(fill = "orange") + # 塗り潰しの色を指定
      labs(title = "Solar Radiation in Tokyo")
  #+end_src
  #+begin_src R :eval no :exports none
    #' @notes
    #' 関数 geom_violin() を用いると密度関数を表示することができる
    tw_data |>
      mutate(month = as_factor(month)) |> 
      ggplot(aes(x = month, y = solar)) + 
      geom_violin(colour = "red", fill = "pink") + # 色を指定
      labs(title = "Solar Radiation in Tokyo")
    #' 表示する幅を適切に調整すれば両者を重ねることもできる
    tw_data |>
      mutate(month = as_factor(month)) |> 
      ggplot(aes(x = month, y = solar)) + 
      geom_violin(width = 1.5, colour = "red", fill = "pink") + 
      geom_boxplot(width = 0.1, fill = "orange") + 
      labs(title = "Solar Radiation in Tokyo")
  #+end_src
  #+name:   fig:05-geomboxplot
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geomboxplot.png]]

** 棒グラフ
:PROPERTIES:
:ID:       DEC92865-F6AD-4030-BAA5-C461ABC047CA
:END:
- 項目ごとの量を並べて表示した図
  - 並べ方はいくつか用意されている
    - 積み上げ (stack)
    - 横並び (dodge)
    - 比率の表示 (fill)
  #+begin_src R :eval no :tangle no
    geom_bar(
      mapping = NULL, data = NULL, stat = "count", position = "stack",
      ...,
      just = 0.5,
      width = NULL,
      na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE
    )
    #' just: 目盛と棒の位置の調整(既定値は真中)
    #' width: 棒の幅の調整(既定値は目盛の間隔の90%)
    #' 詳細は '?ggplot2::geom_bar' を参照
  #+end_src

#+reveal: split
- [[color:green][月ごとの日射量・降水量・降雪量の合計値の推移]]
  #+begin_src R :exports none
    #' @exercise 棒グラフの描画
    #' 月ごとの日射量・降水量・降雪量の合計値の推移
  #+end_src
  #+begin_src R :file figs/05-geombar.png :results graphics
    tw_data |> 
      mutate(month = as_factor(month)) |> group_by(month) |>
      summarize(across(c(solar, rain, snow), sum)) |> # 月ごとに集計
      pivot_longer(!month) |> # long format に変更
      ggplot(aes(x = name, y = value, fill = month)) +
      geom_bar(stat = "identity", position = "dodge", na.rm = TRUE) +
      theme(legend.position = "top") + guides(fill = guide_legend(nrow = 2))
  #+end_src
  #+begin_src R :eval no :exports none
    #' @notes
    #' 並べ方の指定を変えてみるには以下のようにすればよい
    foo <- # 共通部分を保存
      tw_data |> 
      mutate(month = as_factor(month)) |> group_by(month) |>
      summarize(across(c(solar, rain, snow), sum)) |> 
      pivot_longer(!month) |>
      mutate(name = as_factor(name)) |> # name を出現順に処理するために因子化
      ggplot(aes(x = name, y = value, fill = month))
    #' 積み上げ (stack)
    foo + geom_bar(stat = "identity", position = "stack") + labs(x = NULL)
    #' 横並び (dodge) 
    foo + geom_bar(stat = "identity", position = "dodge") + labs(x = NULL)
    #' 比率の表示 (fill)
    foo + geom_bar(stat = "identity", position = "fill") + labs(x = NULL)
  #+end_src
  #+name:   fig:05-geombar
  #+attr_html: :width 50%
  #+attr_latex: :width 0.6\linewidth
  [[file:figs/05-geombar.png]]

** COMMENT 円グラフ
- 項目ごとの比率を円の分割で表示した図
- 時計回りにも反時計回りにも配置できる
  #+BEGIN_SRC R :exports code
    pie(x, clockwise=FALSE, ...)
    #' x: ベクトル
    #' clockwise: 時計回りに書くか否か
    #' ...: plotで指定できるオプションが利用可能
  #+END_SRC

** COMMENT 散布図行列
- 散布図を行列状に並べた図
- データフレームの全ての列の組み合わせの散布図を同時に見ることができる
  #+BEGIN_SRC R :exports code
    pairs(x, ...)
    plot(x,...) # pairsと同じ結果となる
    #' x: データフレーム 
    
    pairs(~ A1 + ... + Ak, data=x, ...)
    plot(~ A1 + ... + Ak, data=x, ...)
    #' 変数A1,...,Akのみ考える場合
  #+END_SRC

** COMMENT 俯瞰図
- 3次元のグラフを2次元に射影した図
  #+BEGIN_SRC R :exports code
    persp(x, y, z, theta=0, phi=15, expand=1)      
    #' x,y,z: x,y,z座標
    #'        (zは行列で，z[i,j]は点(x[i],y[j])に対応する値を与える)
    #' theta,phi: 俯瞰の方向を指定する極座標
    #' expand: z軸の拡大度
    #' ...: plotで指定できるオプションが利用可能
    
    #' 多様な3次元のグラフのためのパッケージがある．
    #' 以下はscatterplot3dパッケージの例
    scatterplot3d(x, color, angle=40)      
    #' x: x,y,z座標を指定するデータフレーム
    #'    (perspのように直接指定することも可能)
    #' color: 色を指定(colではないので注意). 既定値は黒
    #' angle: x軸とy軸の間の角度
    #' ...: plotで指定できるオプションが利用可能
  #+END_SRC

** COMMENT グラフィクス環境の設定
- グラフィクス関数には様々なオプションがある
- 共通の環境設定のためには関数 ~par()~ を用いる
  - 複数の図の配置: ~mrow~, ~mcol~
  - 余白の設定: ~margin~
  - 日本語フォントの設定: ~family~
  - 他多数 (~?par~ を参照)
  - より進んだグラフィクスの使い方の例は
    ~demo("graphics")~, ~example(関数名)~ を参照

** COMMENT 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 適当なデータに対してグラフの作成を行ってみよう
  - PCR検査件数データ (~pcr_case_daily.csv~)
  - 東京都の気候データ (~tokyo_weather.csv~)
  - R言語に用意されているデータ (関数 ~data()~ で一覧表示)


* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- ~tokyo_covid19_2021.csv~ (東京都の新型コロナの動向データ)
  を用いて以下の問に答えよ
  - 陽性者数と陽性率の推移の折線グラフを描け
  - 月ごとの総検査実施件数の推移の棒グラフを描け
  - 曜日ごとの総検査実施件数の箱ひげ図を描け．
  - (参考) 読み込み方
    #+begin_src R :eval no :tangle no
      #' CSVファイルは作業ディレクトリの下の data サブディレクトリにあるとする
      tc_data <- read_csv(file="data/tokyo_covid19_2021.csv")
    #+end_src

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice いろいろなグラフの描画
  #' 東京都の感染動向データによる例
  #' (書き方はいろいろあるので，以下はあくまで一例)
  #'
  #' データの読み込み
  tc_data <- read_csv(file = "data/tokyo_covid19_2021.csv") |>
    rename(年月日 = ...1) # CSVファイルの1列目の名前が空白なので定義しておく
  #'
  #' 陽性患者数の推移 (折れ線グラフ)
  tc_data |>
    ggplot(aes(x = 年月日, y = 陽性者数)) +
    geom_line(colour = "red") +
    labs(title = "陽性患者数の推移")
  #' 陽性率の推移 (折れ線グラフ)
  tc_data |>
    mutate(陽性率 = 陽性者数/総検査実施件数) |>
    ggplot(aes(x = 年月日, y = 陽性率)) +
    geom_line(colour = "blue") +
    labs(title = "陽性率の推移")
  #' 両者を同時に表示する
  tc_data |>
    mutate(陽性率 = 陽性者数/総検査実施件数) |>
    pivot_longer(c(陽性者数,陽性率)) |>
    ggplot(aes(x = 年月日, y = value, colour = name)) +
    geom_line(show.legend = FALSE) +
    facet_grid(rows = vars(name), scales = "free_y") +
    labs(title = "陽性者数・陽性率の推移")
  #'
  #' 月ごとの検査実施件数の推移 (棒グラフ)
  tc_data |> 
    mutate(月 = as_factor(月)) |> group_by(月) |>
    summarize(検査実施件数合計 = sum(総検査実施件数)) |>
    ggplot(aes(x = 月, y = 検査実施件数合計)) +
    geom_bar(stat = "identity", position = "dodge",
             colour = "blue", fill = "lightblue") +
    labs(title = "月ごとの検査実施人数の推移")
  #'
  #' 曜日ごとの検査実施件数の分布 (箱ひげ図)
  tc_data |> 
    ggplot(aes(x = 曜日, y = 総検査実施件数)) +
    geom_boxplot(colour = "blue", fill = "lightblue") +
    labs(title = "曜日ごとの検査実施件数の分布")
  #' 曜日を順序付きの因子に変換してグラフの表示順を制御する
  tc_data |> 
    mutate(曜日 = factor(曜日, # levels で順序を指定．labels で名称を変更
                         levels=c("日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"), 
                         labels=c("日曜","月曜","火曜","水曜","木曜","金曜","土曜"))) |>
    ggplot(aes(x = 曜日, y = 総検査実施件数)) +
    geom_boxplot(colour = "blue", fill = "lightblue") +
    labs(title = "曜日ごとの検査実施件数の分布")
  #' ---------------------------------------------------------------------------
#+end_src

** COMMENT 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- Weylの一様分布定理において，
  無理数 ~a~ を別の値に変更しても
  ~x~ の分布の仕方は
  区間 \((0,1)\) 上でほぼ均一となることを確かめよ．\\
  (どの程度均一に近くなるかは ~a~ によって異なるため, いくつか確かめてみよ)



* COMMENT 基本的な描画
#+begin_src R :exports none :tangle yes
  ### 基本的な描画で用いた例
#+end_src

** 関数 ~plot()~
- ベクトルデータの描画を行う関数
  #+begin_src R :eval no
    plot(x, y = NULL, type = "p", xlim = NULL, ylim = NULL,
         main = NULL, xlab = NULL, ylab = NULL, ...) 
    ## x, y: ベクトル． y は省略可能．
    ## type: 描画タイプ．既定値は "p" (点)．"l" (折れ線)などが指定可
    ## xlim/ylim: x/y 軸の範囲．既定値は自動的に決定
    ## main: 図のタイトル．既定値は空白
    ## xlab: x 軸のラベル名．既定値は Index
    ## ylab: y 軸のラベル名．既定値は x のオブジェクト名
    ## ...: その他のオプション
  #+end_src
  - [[color:gray][適宜 ~help("plot")~ を参照]]

  # - ~...~: 他のオプション．詳細は ~help("par")~ を参照

** 関数 ~plot()~ のオプション
- よく利用される ~...~ の部分
  - ~col~ : 色の指定．
    ~"red"~ や ~"blue"~ など．
    指定可能な色は関数 ~colors()~ を参照
  - ~pch~ : 点の形．
    詳細は ~help("points")~ を参照
  - ~lty~ : 線のタイプ．
    実線・破線など．タイプ名もしくは数字で指定．
    詳細は ~help("par")~ を参照
  - ~lwd~ : 線の太さ．数字で指定
  - ~cex~ : 文字の大きさ．
    既定値の何倍にするかを指定
  # - ベクトル ~x~ に対して ~plot(x)~ を実行すれば, 
  #   横軸に成分番号, 縦軸に各成分を描画した点プロットが作成される

** ベクトルの描画の例
- 1変数の場合 ~plot(x)~
- 2変数の場合 ~plot(x,y)~
- 基本的なオプションの指定例

#+reveal: split
- 1変数の場合 ~plot(x)~
  #+begin_src R :file figs/graph-plot1.png :results graphics :tangle yes
    x <- pi/6*(0:12) # 30度(pi/6)おきに1周期分 (0-2*pi)
    plot(sin(x)) # x軸はベクトルの要素番号(Index)，y軸はsin(x)の値を描画
  #+end_src
#+NAME:   fig:graph-plot1
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot1.png]]

#+reveal: split
- 2変数の場合 ~plot(x,y)~
  #+begin_src R :file figs/graph-plot2.png :results graphics :tangle yes
    x <- pi/6*(0:12)
    plot(x, sin(x)) # x の値に対する y=sin(x) の値を対応づけて描画
  #+end_src
#+NAME:   fig:graph-plot2
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot2.png]]


#+reveal: split
- オプションの例
  #+begin_src R :file figs/graph-plot3.png :results graphics :tangle yes
    x <- pi/6*(0:12)
    plot(x, sin(x), type="l", lwd=3, col="blue", ylab="y=sin(x)") 
  #+end_src

#+NAME:   fig:graph-plot3
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot3.png]]

** 重ね描きのための関数
- 別のベクトルを点として重ね描きする場合
  #+begin_src R :eval no
    points(x, y = NULL, ...) # ... は関数 plot() と同様なオプションが指定可能
  #+end_src
- 別のベクトルを線として重ね描きする場合
  #+begin_src R :eval no
    lines(x, y = NULL, ...) # ... は関数 plot() と同様なオプションが指定可能
  #+end_src
- 文字を重ね描きする場合
  #+begin_src R :eval no
    text(x, y = NULL, labels, ...) # labelsに文字列を指定
  #+end_src

** 重ね描きの例
- ベクトルデータの重ね描き
  #+begin_src R :file figs/graph-plot4.png :results graphics :tangle yes
    x <- seq(0, 4*pi, by=0.5)
    y <- sin(x)
    z <- cos(x)
    plot(x, y, type="b", pch=4, ylim=c(-2,2), col="red") # "b"="p+l"
    points(x, z, col="blue", pch="C") # 点を追加. pchは文字も指定できる
    lines(x, z, col="cyan", lwd=3) # 折れ線を追加
  #+end_src
#+reveal: split
#+CAPTION: ベクトルデータの重ね描き
#+NAME:   fig:graph-plot4
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot4.png]]

** 関数 ~curve()~ 
- 1変数関数の描画を行う関数
  #+begin_src R :eval no
    curve(expr, from = NULL, to = NULL, add = FALSE,
          type = "l", xname = "x", xlab = xname, ylab = NULL, ...)
    ## expr: 1変数関数 (関数名)
    ## from: x 軸の左端
    ## to: x 軸の右端
    ## add: TRUE で重ね描きする
    ## xname: x 軸の変数名
  #+end_src
- 関数 ~plot()~ にも同様の機能がある
  #+begin_src R :eval no
    plot(x, y = 0, to = 1, ...) # ... は"ベクトルの描画"と同様に指定が可能
  #+end_src

  # - ~...~: "ベクトルの描画"と同じオプションが利用可能
  # - 別の関数 ~f~ を重ね描きする場合
  #   #+begin_src R :eval no
  #     curve(f, add=TRUE, ...)
  #   #+end_src

** 関数の描画の例
- 関数の描画
  #+begin_src R :file figs/graph-plot5.png :results graphics :tangle yes
    curve(sin, from=0, to=4*pi, 
          col="blue", lwd=2, # グラフの線の色と太さ
          xlab="time", ylab="sin/cos") # x/y軸のラベルの文字列を指定
    curve(cos, # 上書きする場合は範囲の指定は不要
          add=TRUE, # グラフを上書き
          col="red", lwd=2)
  #+end_src
#+reveal: split
#+CAPTION: 関数の描画
#+NAME:   fig:graph-plot5
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot5.png]] 

#+reveal: split
- 関数とベクトルデータの重ね描き
  #+begin_src R :file figs/graph-plot6.png :results graphics :tangle yes
    x <- seq(0, 4*pi, by=0.25)
    y <- sin(x) + rep(c(-0.2, 0.1), len=length(x))
    plot(x, y, type="p", pch="x", ylim=c(-2,2), col="red") 
    lines(x, y, col="blue", lwd=2) # 折れ線を追加
    curve(sin, add=TRUE, col="orange", lwd=3)
  #+end_src

#+reveal: split
#+CAPTION: 関数とベクトルデータの重ね描き
#+NAME:   fig:graph-plot6
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot6.png]]

** 散布図
- 2種類のデータ \(x_1,\dots,x_n\)
  および \(y_1,\dots,y_n\) が与えられたとき，
  同じ添字を持つ点 \((x_1,y_1),\dotsc,(x_n,y_n)\) を
  平面上に描画した図
- データの性質を捉えるための基本的な描画の方法

** 関数 ~plot()~
- ベクトルデータの散布図を作成する (既出の機能)
  #+begin_src R :eval no
    plot(x, y = NULL, ...) #... は"ベクトルの描画"と同様に指定が可能
    ## x: 1種類目のデータ c(x1,x2,...)
    ## y: 2種類目のデータ c(y1,y2,...) (x と同じ長さ)
  #+end_src

** 関数 ~plot()~
- データフレーム ~x~ の変数A，Bの散布図を作成する
  #+begin_src R :eval no
    plot(B ~ A, data = x, ...) # "Y軸 ~ X軸" と指定
    ## x: データフレーム
    ## A,B: 変数名 (データフレームの列名を利用可能) 
    ##      "B ~ A" は formula と呼ばれる
  #+end_src
  - formula の書き方は ~help("formula")~ を参照
  - データフレーム ~x~ に対して
    ~plot(x)~ を実行すると，
    すべての変数のペアに対する散布図が
    作成される(散布図行列・対散布図; ~pairs()~ 後述)

** 散布図の例
- データフレームを用いた散布図
  #+begin_src R :file figs/graph-plot7.png :results graphics :tangle yes
    plot(Ozone ~ Wind, data=airquality, # xy軸名は列の名前が使われる
         pch="*", # 点の形を文字で指定することもできる
         col="red", 
         cex=2) # cexは点の大きさの倍率を指定する
  #+end_src

#+reveal: split
#+CAPTION: データフレームを用いた散布図
#+NAME: fig:graph-plot7
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot7.png]]
   
** 日本語に関する注意
- 日本語を含む図で文字化けが起こった場合 (主にmacOS)
  - theme の文字の変更
  - geom_text/geom_labelなどの文字を埋め込む関数の扱い
  - 以下のサイトなども参考になる \\
    https://oku.edu.mie-u.ac.jp/~okumura/stat/font.html

** COMMENT 日本語に関する注意
- 日本語を含む図で文字化けが起こった場合 \\
  (主にmacOS)
  - 関数 ~par~ の ~family~ オプションでフォントを指定 \\
    ヒラギノ角ゴシックW4を指定する場合
    #+begin_src R :eval no
      par(family="HiraginoSans-W4") # 数字を変えると太さが変わる
    #+end_src
  - 以下のサイトなども参考になる \\
    https://oku.edu.mie-u.ac.jp/~okumura/stat/font.html

** 図の保存
- RStudioの機能を使う場合 :
  1. 右下ペインの *Plots* タブの *Export* をクリック
  2. 形式を指定する \\
     [[color:gray][クリップボードにコピーもできる]]
  3. サイズを指定して保存
- コンソール / R Scriptで実行する場合は以下を参照
  - ~help("pdf")~ : PDFファイルに保存
  - ~help("png")~ : PNGファイルに保存
  - ~help("dev.copy")~ : "graphic device" 間でコピー



* COMMENT 分布の視覚化
  #+begin_src R :exports none :tangle yes
    ### 分布の視覚化で用いた例
  #+end_src

** ヒストグラム
- データの値の範囲をいくつかの区間に分割し，
  各区間に含まれるデータ数を棒グラフにしたもの
- 各棒グラフの矩形
  - 横幅が区間に対応
  - 面積が区間に含まれるデータの個数に比例
- データの分布の仕方を可視化するのに有効
  - どのあたりに値が集中しているか
  - どの程度値にばらつきがあるか

** 関数 ~hist()~ 
- ヒストグラムを描画する関数
  #+begin_src R :eval no
    hist(x, breaks = "Sturges", freq, ...) # ... は関数 plot() と同様に指定可能
    ## x: ベクトル
    ## breaks: 区間の分割の仕方を指定．既定値はSturgesの公式．      
    ##         数字を指定するとデータ範囲をその数字に近い個数に等分割する．
    ##         詳細はヘルプを参照
    ## freq: TRUE (既定値)を指定すると縦軸はデータ数
    ##       FALSE を指定すると縦軸はデータ数/全データ数
  #+end_src

  # - ...: 関数 ~plot()~ で指定できるオプションが利用可能
  # % (データ数\(n\)に対し\(\lceil\log_2n+1\rceil\))で計算
  # % \footnote{\(\lceil x\rceil\)は\(x\)以下の最大の整数を表す}．
  # % だが\texttt{breaks}の指定によっても変わる
  #      - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

** ヒストグラムの例
- 関数 ~hist()~ によるヒストグラムの作図
  #+begin_src R :file figs/graph-hist1.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 東京都の気温のヒストグラムを作成する
    tw_data <- read.csv("data/tokyo_weather.csv") # 東京都の気象データの読み込み
    hist(tw_data$temp, 
         xlab="気温(℃)", ylab="頻度",
         breaks=25, # ビンの数を約25に設定
         labels=TRUE, # 各ビンの度数を表示
         col="lightpink", main="気温のヒストグラム")
  #+end_src
#+reveal: split
#+CAPTION: ヒストグラム
#+NAME:   fig:graph-hist1
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-hist1.png]]


#+reveal: split
- 密度での表示
  #+begin_src R :file figs/graph-hist2.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    hist(tw_data$wind, freq=FALSE, # 全体に対する割合で表示
         xlab="風速(m/s)", ylab="密度",
         breaks=25, 
         col="lightblue", border="blue", # 長方形の境界の色
         main="風速の密度") 
  #+end_src

#+reveal: split
# #+CAPTION: ヒストグラム
#+NAME:   fig:graph-hist2
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-hist2.png]]

** 箱ひげ図
- データの中心，散らばり具合および外れ値を考察するための図 
  (ヒストグラムの簡易版)
- 複数のデータの分布の比較の際に有効
  - 太線で表示された中央値(第2四分位点)
  - 第1四分位点を下端・第3四分位点を上端とする長方形(箱)
  - 第1四分位点・第3四分位点からそれぞれ箱の長さの1.5倍以内にあるデータのうちの
    最小の値・最大の値を下端・上端とする直線(ひげ)
- ひげの外側のデータは点で表示される

** 関数 ~boxplot()~
- 箱ひげ図を描画する関数
  #+begin_src R :eval no
    boxplot(x, ...) # ... は関数 plot() と同様に指定可能
    ## x: ベクトルまたはデータフレーム
    ##    ベクトルに対しては単一の箱ひげ図
    ##    データフレーム対しては列ごとの箱ひげ図
  #+end_src

  #     - ...: 関数 ~plot()~ で指定できるオプションが利用可能
  #     - ~...~: 関数 ~plot()~ と同様のオプションを指定可能
- 質的変数ごとに分類して描画する場合 
  #+begin_src R :eval no
    boxplot(B ~ A, data = x, ...) 
    ## x: データフレーム
    ## A: x の変数 (質的変数; 性別・植物の種類など)
    ## B: x の変数
  #+end_src

** 箱ひげ図の例
- 関数 ~boxplot()~ による箱ひげ図の作図
  #+begin_src R :file figs/graph-boxplot1.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 気温, 降雨, 日射, 降雪, 風速の箱ひげ図を作成する
    boxplot(subset(tw_data, select=c(temp:snow,wind)), # 数値データの一部を抽出
            names=c("気温","降雨","日射","降雪","風速")) # 各箱ひげ図の名前を指定
    ## names を指定しなければ列名が使われる 
  #+end_src
#+reveal: split
#+CAPTION: 箱ひげ図
#+NAME:   fig:graph-boxplot1
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-boxplot1.png]]

#+reveal: split
- 箱を横向きにする場合
  #+begin_src R :file figs/graph-boxplot1h.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 気温, 降雨, 日射, 降雪, 風速の箱ひげ図を作成する
    boxplot(subset(tw_data, select=c(temp:snow,wind)), # 数値データの一部を抽出
            names=c("気温","降雨","日射","降雪","風速"), # 各箱ひげ図の名前を指定
            horizontal=TRUE) # 図を横向きに回転する
  #+end_src

#+reveal: split
#+CAPTION: 箱ひげ図 (横向き)
#+NAME:   fig:graph-boxplot1h
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-boxplot1h.png]]

#+reveal: split
- 条件ごとの箱ひげ図の作図
  #+begin_src R :file figs/graph-boxplot2.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 月ごとの気温の分布を箱ひげ図によって可視化する
    boxplot(temp ~ month, data=tw_data,
            col="orange",
            xlab="月",ylab="気温",main="月ごとの気温")
    ## 図を回転する場合は horizontal を指定する
    ## boxplot(気温 ~ 月, data=tw_data,
    ##         col="purple", main="月ごとの気温", horizontal=TRUE)
  #+end_src

#+reveal: split
#+CAPTION: 条件ごとの箱ひげ図
#+NAME:   fig:graph-boxplot2
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-boxplot2.png]]


* COMMENT 比率の視覚化
#+begin_src R :exports none :tangle yes
  ### 比率の視覚化で用いた例
#+end_src

** 関数 ~barplot()~
- 棒グラフを作成する関数
  #+begin_src R :exports none
    barplot(x, width = 1, space = NULL, beside = FALSE,
            legend.text = NULL, args.legend = NULL, 
            ...) # ... は関数 plot() と同様に指定可能
    ## x: ベクトルまたは行列 (データフレームは不可)
    ## width: 棒の幅
    ## space: 棒グラフ間・変数間のスペース
    ## legend.text: 凡例
    ## beside: 複数の変数を縦に並べるか・横に並べるか
    ## args.legend: 関数 legend() に渡す引数
  #+end_src
  #     - ...: 関数 ~plot()~ で指定できるオプションが利用可能

** 棒グラフの例
- 関数 ~barplot()~ による棒グラフの作図
  #+begin_src R :file figs/graph-barplot1.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 月ごとに各変数の平均を計算
    (foo <- aggregate(. ~ month, FUN=mean,
                      data=subset(tw_data, select=c(month,temp:snow,wind))))
    ## 月ごとの気温の平均値の棒グラフを作成する
    barplot(foo$temp, # 棒の高さのベクトル
            col="slateblue", # 棒の色の指定
            names.arg=foo$month, # x軸のラベル
            xlab="月",main="平均気温") # タイトル 
  #+end_src
#+reveal: split
#+CAPTION: 棒グラフ
#+NAME:   fig:graph-barplot1
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-barplot1.png]]

#+reveal: split
- 複数の棒グラフ
  #+begin_src R :file figs/graph-barplot2.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 気温, 降雨, 日射, 降雪, 風速の月ごとの棒グラフを作成する
    barplot(as.matrix(foo[ ,-1]), # 第1引数のデータフレームは行列にする
            col=rainbow(12)[c(8:1,12:9)], # 12色に色分け．季節に合うように色を並べ変えている
            beside=TRUE, # 各列ごとの棒グラフを横に並べる
            space=c(1.5, 3), # 棒グラフ間・変数間のスペースを指定
            names.arg=c("気温","降雨","日射","降雪","風速"), # 各列の名前を指定．指定しなければ列名が使われる
            legend.text=paste0(foo$month,"月"), # 凡例の指定
            args.legend=list(ncol=2)) # 凡例を2列にして表示
  #+end_src

#+reveal: split
# #+CAPTION: 棒グラフ
#+NAME:   fig:graph-barplot2
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-barplot2.png]]

** 関数 ~pie()~ 
- 円グラフを作成する関数
  #+begin_src R :eval no
    pie(x, labels = names(x), 
        clockwise = FALSE, ...) # ... は関数 plot() と同様に指定可能
    ## x: ベクトル
    ## labels: ベクトルの各成分のラベル (既定値ではベクトルから取得)
    ## clockwise: 時計回りに書くか否か
  #+end_src
  #     - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

** 円グラフの例
- 関数 ~pie()~ による円グラフの作図
  #+begin_src R :file figs/graph-pie1.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## ヒストグラムの機能を用いてデータの集計を行う
    foo <- hist(tw_data$solar, breaks=5, plot=FALSE) # 5つ程度に分類を指定．実際には6つに分類
    bar <- foo$count # 各ビン内のデータ数
    baz <- foo$breaks # ビンの境界
    names(bar) <- paste(baz[-length(baz)],baz[-1],sep="-") # ビンの範囲の文字列を作成
    ## 6つに分類した日射量ごとの日数の割合を示す円グラフを作成する
    pie(bar, clockwise=TRUE, main="日射量別の日数の割合",
        col=heat.colors(length(bar),rev=TRUE)) # 日射量が高いほど赤を濃く指定
  #+end_src
#+reveal: split
#+CAPTION: 円グラフ
#+NAME:   fig:graph-pie1
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-pie1.png]]


* COMMENT 多次元データの視覚化
  #+begin_src R :exports none :tangle yes
    ### 多次元データの視覚化で用いた例
  #+end_src
** COMMENT 関数 ~pairs()~
- 散布図行列 (対散布図) を作成する関数
  #+begin_src R :eval no
    pairs(x, ...) # 関数 plot() でも良い
    ## x: データフレーム 
  #+end_src
  - すべての列のペアに対する散布図を行列状に配置
- 変数 ~A1~, \(\dots\), ~Ak~ (列名) のみ考える場合
  #+begin_src R :eval no
    pairs(~ A1 + ... + Ak, data = x, ...) # 関数 plot() でも良い
    ## x: データフレーム
    ## A1,...,Ak: データフレームの列名
  #+end_src

** COMMENT 散布図行列の例
- 関数 ~pairs()~ による散布図の作図
  #+begin_src R :file figs/graph-pairs1.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 気温, 日射, 風速に関する散布図を作成する
    pairs(~ temp + solar + wind, data=tw_data,
          labels=c("気温","日射","風速"), # 指定しなければ列名が使われる
          col=rainbow(12)[tw_data$month]) # 月毎に異なる色で表示
  #+end_src

#+reveal: split
#+CAPTION: 散布図行列
#+NAME:   fig:graph-pairs1
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-pairs1.png]]

** 関数 ~persp()~ 
- 3次元のグラフを2次元に射影した俯瞰図を描く関数
  #+begin_src R :exports none
    persp(x, y, z, theta = 0, phi = 15, expand = 1, ...) # ... は関数 plot() と同様に指定可能
    ## x,y,z: x,y,z 座標
    ##        z は点(x[i],y[j])に対応する値を(i,j) 成分とする行列で与える必要がある
    ## theta,phi: 俯瞰の方向を指定する極座標
    ## expand: z軸の拡大度
  #+end_src

  #     - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

** 3次元俯瞰図の例
- 関数 ~persp()~ による2変数関数の俯瞰図
  #+begin_src R :file figs/graph-plot3d1.png :results graphics :tangle yes
    f <- function(x,y) x^2 - y^2
    x <- seq(-3, 3, length=51) # x座標の定義域の分割
    y <- seq(-3, 3, length=51) # y座標の定義域の分割
    z <- outer(x, y, f) # z座標の計算
    ## 基本的な俯瞰図
    ## persp(x, y, z, col="lightblue")
    ## 俯瞰する向きを指定
    persp(x, y, z, theta=30, phi=30, expand=0.5, # 俯瞰する視線の設定
          col="royalblue", main=expression(z==x^2-y^2))
  #+end_src
#+reveal: split
#+CAPTION: 俯瞰図
#+NAME:   fig:graph-plot3d1
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot3d1.png]]

** 3次元グラフのためのパッケージ
- 以下は ~scatterplot3d()~ の例
  #+begin_src R :eval no
    library("scatterplot3d") # パッケージの読み込み
    scatterplot3d(x, color, angle = 40, ...) # ... は関数 plot() とは若干異なる
    ## x: x,y,z座標を指定するデータフレーム
    ##    関数 persp() のようにx,y,zを個別に指定することも可能
    ## color: 色を指定(colではないので注意). 既定値は黒
    ## angle: x軸とy軸の間の角度
  #+end_src
  - 詳細は ~example("scatterplot3d")~ を参照
  #     - ~...~: 関数 ~plot()~ で指定できるオプションが利用可能

** 3次元散布図の例
- 関数 ~scatterplot3d()~ による3次元散布図
  #+begin_src R :file figs/graph-plot3d2.png :results graphics :tangle yes
    ## install.packages("scatterplot3d") # 初めて使う時に必要
    library("scatterplot3d") # パッケージのロード
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 風速, 日射, 気温の3次元散布図を作成する
    scatterplot3d(subset(tw_data, select=c(wind, solar, temp)),
                  xlab="風速",ylab="日射",zlab="気温", # 指定しなければ列名が使われる
                  pch=4, color="orchid")
  #+end_src

#+reveal: split
#+CAPTION: 3次元散布図
#+NAME:   fig:graph-plot3d2
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-plot3d2.png]]

* COMMENT 凡例の追加
#+begin_src R :exports none :tangle yes
  ### 凡例の追加で用いた例
#+end_src

** 関数 ~legend()~
- グラフに凡例を追加する関数
  #+begin_src R :exports none
    legend(x, y = NULL, legend, ...) # ...はその他のオプション
    ## x,y: 凡例の位置を指定 (座標やキーワードで指定が可能)
    ## legend: 凡例の文字列ベクトル
  #+end_src

  - 複雑なオプションは ~help("legend")~ を参照
  - 数式の表示の詳細は ~help("plotmath")~ を参照

** 凡例の例
- 凡例の追加
  #+begin_src R :file figs/graph-legend.png :results graphics :tangle yes
    f <- function(x) exp(-x) * cos(x)
    plot(f, 0, 2*pi, col="red", lwd=2, ylab="")
    g <- function(x) exp(-x) * sin(x)
    curve(g, lty=2, # グラフの線の形式 2は破線
          add=TRUE, col="blue", lwd=2)
    legend(4, # 凡例の左上のx座標
           1, # 凡例の左上のy座標
           legend=c(expression(e^{-x}*cos(x)),expression(e^{-x}*sin(x))),
           lty=c(1,2), lwd=2, col=c("red","blue"), # 指定はグラフに準拠
           bty="n", # 凡例の枠線の形式(オプション) "n"は枠線なし
           y.intersp=2) # 行間の指定(オプション)
  #+end_src

#+reveal: split
#+CAPTION: 凡例の追加
#+NAME:   fig:graph-legend
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-legend.png]]

#+reveal: split
- 東京の気象データを用いた例
  #+begin_src R :file figs/graph-font.png :results graphics :tangle yes
    if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
    ## 東京の気象データから月ごとの気温,降水量,日射量の平均を計算し描画する
    (foo <- aggregate(. ~ month, FUN=mean,
                      data=subset(tw_data, select=c(month,temp,rain,solar))))
    plot(foo$temp, type ="b", lwd=3, col="green", ylim=c(0, max(foo$temp)+1),
         xlab="月", ylab="", main="東京の気候データ", axes=FALSE) # 軸は無
    axis(1, 1:12, 1:12); axis(2) # x(1),y(2)軸の作成
    lines(foo$rain, type="h", lwd=3, col="blue") # 棒グラフ
    lines(foo$solar, type="s", lwd=3, lty=2, col="red") # 階段グラフ
    abline(0, 0, lwd=2, lty="dotted") #  y=0の線を引く
    legend("topleft", inset=0.02, # 左上で全体の2%(0.02)内側に良せる
           legend=c("気温","降水量","日射量"),
           col=c("green","blue","red"), lwd=3, lty=c(1,1,2))
  #+end_src

#+reveal: split
#+CAPTION: 日本語での凡例の表示
#+NAME:   fig:graph-font
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/graph-font.png]]

* COMMENT 補遺
** 関数 ~par()~
- グラフィクス環境の設定 (複数図の配置, 余白の設定など) をする関数
  #+begin_src R :eval no
    par(tag = value)
    ## tag: グラフィックスパラメータ
  #+end_src
  - 描画する線の種類・色・点の形などの既定値を設定することができる
  - 設定可能なグラフィックスパラメータについては ~help("par")~ を参照
  # *** 注意
  #     プロット環境は非常に細かく設定でき，
  #     またそれぞれの描画関数独自のパラメータも存在するため，
  #     ここでは紹介しきれない\\
  #     必要に応じてヘルプやインターネット上の情報を参照すること

** package::ggplot2
- Rのグラフィック機能を拡張するパッケージの1つ
- 統一的な文法で系統的に美しいグラフを描くことを目指して開発
- 詳細については https://docs.ggplot2.org/ を参照

#+reveal: split
#+begin_src R :file figs/brainbody.png :exports both :results graphics
  ### - Brain and Body Weights for 28 Species
  library("MASS") 
  library("tidyverse") 
  ## 外れ値を除いた回帰直線を引く
  model <- lm(log(brain) ~ log(body),
              data=Animals, subset=-c(6,16,26))
  ggplot(Animals, aes(body, brain, label=rownames(Animals))) +
    scale_x_log10() + scale_y_log10() + # log-log plot
    geom_line(aes(y=exp(predict(model,newdata=Animals))),
              color="dodgerblue", lwd=1.2) +
    geom_text(size=3) + 
    labs(title="Brain and Body Weights for 28 Species",
         x="body [kg]", y="brain [g]")
#+end_src

#+reveal: split
#+CAPTION: 脳の重さと体重の関係
#+NAME: fig:brainbody
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/brainbody.png]]

* COMMENT 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 配布したサンプルデータ
  - ~jpdata1.csv~
  - ~tokyo_weather.csv~
  - ~covid19_tokyo.csv~
  - ~covid19_tokyo_patients.csv~
  を用いて以下の問いに答えよ．
  - 3次元の散布図を作成せよ．
  - 凡例を加えたグラフを作成せよ．

#+begin_src R :eval no :exports none
  ### 練習問題
  ## 3次元の散布図 (jpdat1/3.csvを用いた例)
  if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
  scatterplot3d(subset(jp_data, select=c(婚姻,離婚,失業)), 
                pch=19, color="blue")
  pairs(subset(jp_data, select=c(婚姻,離婚,失業)), col="blue") # 三面図で見てみる

  ### 凡例の追加 (tokyo_covid19_2021.csvを用いた例)
  ## データの読み込み
  if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
  plot(総検査実施件数/10 ~ 年月日, data=tc_data,
       type="h", col="blue", xlab="日付", ylab="人数")
  abline(h=seq(0,2000,by=100), lty=2, col="darkgray") # 補助線の追加
  lines(陽性者数 ~ 年月日, data=tc_data, col="red") 
  title(main="検査実績の推移") 
  legend("topright", inset=0.01, 
         legend=c("検査実施件数/10","陽性者数"),
         col=c("blue","red"), lwd=3, lty=1)

  ### 凡例の追加 (tokyo_covid19_patients_2021.csvを用いた例)
  ## データの読み込み
  tcp_data <- read.csv(file="data/tokyo_covid19_patients_2021.csv")
  ## 簡単な集計には関数table()を使うとよい
  table(subset(tcp_data, select=c(患者_年代))) # 名前のついたベクトル
  barplot(table(subset(tcp_data, select=c(患者_年代))))
  ## 月別の年齢分布を調べる
  library(lubridate) # 年月日の文字列を操作するパッケージ
  foo <-with(tcp_data,
             data.frame(age=患者_年代,
                        month=month(公表_年月日,label=TRUE,abbr=FALSE)))
  (bar <- table(foo)) # (年齢 x 月) の患者数の表(行列)
  (baz <- apply(bar, 2, function(z){z/sum(z)})) # 月ごとの年齢分布
  ## 描画
  if(Sys.info()["sysname"]=="Darwin"){par(family="HiraginoSans-W4")} # 日本語表示  
  barplot(bar, # 人数のグラフ
          col=rainbow(13), # 13色に色分け
          beside=TRUE, # 棒グラフを横に並べる
          space=c(1.5, 3), # 棒グラフ間・変数間のスペースを指定
          legend.text=rownames(bar), # 凡例の指定, 2列，縮小, 左上に表示
          args.legend=list(ncol=2,cex=0.5,x="topleft",inset=0.01)) 
  barplot(baz, # 比率のグラフ
          col=rainbow(13), # 13色に色分け
          beside=TRUE, # 棒グラフを横に並べる
          space=c(1.5, 3), # 棒グラフ間・変数間のスペースを指定
          legend.text=rownames(baz), # 凡例の指定，2列，縮小
          args.legend=list(ncol=2,cex=0.5)) 
#+end_src


* 次回の予定
- 計算機による数値実験
- 乱数とは
- 乱数を用いた数値実験


* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
   
   
