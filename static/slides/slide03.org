#+TITLE: 関数と制御構造
#+SUBTITLE: 第3講 - 関数の定義とプログラムの作成
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@gmail.com
#+DATE: 
#+STARTUP: hidestars content indent
# Time-stamp: <2025-05-02 13:09:14 mura>
:REVEAL:
#+SETUPFILE: "./reveal.js/local/mycourse.org"
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
  - 関数の使い方，引数の扱い，順番，既定値
    
* 講義概要
:PROPERTIES:
:ID:       6D97417D-4268-4DFE-B897-9717F3BFAE49
:END:
- R言語における関数
- 引数の扱い方 (引数名・順序・既定値)
- 自作関数の定義
- 制御構造 (条件分岐・繰り返し)

#+begin_src R :exports none :tangle no
  setwd("~/Desktop/lectures/u-tokyo/spring/course")
#+end_src
#+begin_src R :exports none
  ### 第3講 資料の例題
#+end_src
  

* R言語における関数
:PROPERTIES:
:ID:       31831D7F-2F2A-4107-A80C-CBC412E77D1B
:END:
#+begin_src R :exports none
  #' @exercise R言語における関数
#+end_src
** 関数 (復習)
- 関数の取り扱いは一般的な計算機言語とほぼ同様
- 関数は引数とその値を指定して実行
- 引数名は順序を守れば省略可能
- [[color:green][関数の呼び出し方の例]]
  #+begin_src R :eval no :tangle no
    f(arg1 = value1, arg2 = value2) # (擬似コード)
    #' arg1, arg2 は引数の名前，value1, value2 は引数に渡す値を表す
    f(value1, value2) # 上と同値．順序に注意
  #+end_src
- 引数がない場合もある

** 関数の実行例
:PROPERTIES:
:ID:       4160A7BA-012F-40F3-BA50-345CEF6BE208
:END:
- [[color:green][正弦関数の計算]]
  #+begin_src R :eval no
    sin(x = pi/2) # "引数名 = 値" で指定 
    sin(pi/2)     # 上と同値 (引数と値の関係が明かなら引数名は省略可能)
  #+end_src
- [[color:green][対数関数の計算]] 
  #+begin_src R :eval no
    help(log)            # ヘルプを表示して使い方を確認する
    x <- 16; b <- 2      # xやbに適当な数値を代入する．1行で複数の処理を行う場合は ; を用いて並べる
    log(x = x, base = b) # 底をbとする対数
    log(x, b)            # 上と同値
    log(base = b, x = x) # 上と同値
    log(b, x)            # 上と異なる (=log(x = b, base = x))
    log(x)               # 自然対数 (既定値による計算 =log(x, base = exp(1)))
  #+end_src

** 引数と返値
:PROPERTIES:
:ID:       5041BA14-3F6C-486A-9CD8-232FFC9BACEF
:END:
- ヘルプにより関数の引数および返値を確認できる
  - 引数については "Arguments" の項を参照
  - 返値については "Values" の項を参照
- 引数を省略すると既定値 (default) が用いられる
- [[color:green][ヘルプによる関数仕様の表示の例]]
  #+begin_src R :eval no
    #' 正規乱数を生成する関数
    help(rnorm) # Help タブから指定しても良い
    #' ヒストグラムを表示する関数
    ?hist       # help(hist) と同値
  #+end_src

** 既定値を持つ関数の実行例 (1/2)
:PROPERTIES:
:ID:       DA7AC1CE-A855-4C34-A5A6-6043909ADDC7
:END:
- [[color:green][正規乱数の生成]] 
  #+begin_src R
    rnorm(5)                       # 平均0 分散1 の正規乱数を5個生成
    rnorm(5, mean = 10)            # 平均10 分散1 の正規乱数を5個生成
    rnorm(sd = 0.1, n = 5)         # 平均0 分散0.01 の正規乱数を5個生成
    rnorm(n = 5, mean = 2, sd = 2) # 平均2 分散4 の正規乱数を5個生成
  #+end_src

** 既定値を持つ関数の実行例 (2/2)
:PROPERTIES:
:ID:       1F5AD47C-A64B-404B-8CC1-96F5F8CE1B48
:END:
- [[color:green][ヒストグラムの表示]] 
  #+begin_src R :eval no
    foo <- rnorm(n = 10000, mean = 50, sd = 10) # 平均50 標準偏差10 の正規乱数
    hist(foo)                  # データ以外全て既定値で表示
    hist(foo,                  # 既定値のいくつかを変更する
         breaks = 30,          # ビンを30程度に調整する
         col = "lightgreen",   # 色の指定
         main = "mathematics", # タイトルの指定
         xlab = "score")       # x軸ラベルの指定
    #' Plots タブで描画結果を確認
  #+end_src


* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       3B6C880F-F400-4FFF-A9D6-987A6FD1D965
:END:
- ヘルプ機能 (Help タブの検索窓, 関数 ~help(),?~)
  を用いて関数 ~sample()~ を調べてみよう
- サイコロを1回振る試行を模擬してみよう
- サイコロを10回振る試行を模擬してみよう
  - 引数 ~replace~ を調べよ
- 1が出易いサイコロを作ってみよう
  - 引数 ~prob~ を調べよ
- 1から6をランダムに並べ替えてみよう 

#+begin_src R :eval no :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice 関数の使い方
  #'
  #' sample を調べる
  help(sample)
  #' サイコロを1回振る試行
  sample(x = 1:6, size = 1)
  #' サイコロを10回振る試行
  sample(x = 1:6, size = 10) # エラーになる
  sample(x = 1:6, size = 10, replace = TRUE)
  #' 1が他の目の3倍出易いサイコロ
  sample(1:6, 10, replace = TRUE, prob = c(3, rep(1,5))) # 引数の一部を省略
  #' 1から6をランダムに並べ替える
  sample(1:6, 6) # 既定値ではreplaceしない(復元抽出しない)ので並べ替えになる
  #' ---------------------------------------------------------------------------
#+end_src


* 関数の定義
:PROPERTIES:
:ID:       A4E22BE4-1DAD-4DE1-AB77-A66C193A06EE
:END:
  #+begin_src R :exports none :tangle yes
    #' @exercise 関数の定義
  #+end_src
** 自作関数
- 他の言語と同様にRでも関数を定義できる   
- 関数の定義には関数 ~function()~ を利用する 
  #+begin_src R :eval no :tangle no
    #' 関数 function() 記法 (擬似コード)
    関数名 <- function(引数){ # 計算ブロックの開始
      # このブロック内に必要な手続きを記述する．複数行に渡って構わない
      return(返値) # 計算結果を明示的に示す
    } # ブロックの終了
  #+end_src

** 自作関数の例 (1/2)
:PROPERTIES:
:ID:       B0B6E1AD-EBD0-44F5-A2F9-4BDB0FA09E2C
:END:
- [[color:green][半径 r から球の体積と表面積を求める関数]]
  #+begin_src R
    foo <- function(r){
      volume <- (4/3) * pi * r^3                # 球の体積
      surface <- 4 * pi * r^2                   # 球の表面積
      out <- c(volume, surface)                 # 返り値のベクトルを作る
      names(out) <- c("volume", "surface_area") # 返り値の要素に名前を付ける
      return(out)                               # 値を返す
    }
    foo(r = 2) # 実行
    foo(3) 
  #+end_src

** 自作関数の例 (2/2)
:PROPERTIES:
:ID:       8270D5D9-0D50-467E-84F8-32EC915BE622
:END:
- [[color:green][初項 a 公比 r の等比数列の最初のn項 (既定値は5)]]
  #+begin_src R :tangle yes
    bar <- function(a, r, n = 5){
      out <- a*r^(1:n-1) # 1:n-1 と 1:(n-1) は異なるので注意
      return(out)        # 値を返す
    }
    bar(1, 2)                     # 初項1 公比2 の最初の5項
    bar(1, 2, 10)                 # 初項1 公比2 の最初の10項
    bar(n = 10, 1, 2)             # 変数名を指定すると引数の位置を変えることができる
    bar(r = 0.5, n = 10, a = 512) # 同上
  #+end_src


* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 例題
:PROPERTIES:
:ID:       DEE6D123-91C2-4AF1-AF76-D7679D52DB44
:END:
- 三角形の3辺の長さ \(x,y,z\) を与えると
  面積 \(S\) を計算する関数を作成せよ．
  - 参考: *ヘロンの公式* より
    #+begin_quote
    \begin{equation}
      S=\sqrt{s(s-x)(s-y)(s-z)},\quad
      s=\frac{x+y+z}{2}
    \end{equation}
    #+end_quote
    が成り立つ．

#+reveal: split
- 解答例
  #+begin_src R :exports none
    #' @exercise 三角形の面積を計算する関数
  #+end_src
  #+begin_src R
    my_heron <- function(x, y, z){
      #' 関数の定義は上書きされるので独特の名前にするのがお薦め
      s <- (x+y+z)/2                 # 補助変数 s の計算
      S <- sqrt(s*(s-x)*(s-y)*(s-z)) # ヘロンの公式による面積の計算
      return(S)                      # 面積を返す
    }
    my_heron(3, 4, 5)   # よく知られた直角三角形を使って計算結果を確認する
    my_heron(12, 13, 5) 
  #+end_src

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       1356AE3E-1C3F-4386-BB1D-062EBBF54D92
:END:
- 1から整数 \(n\) までの和を求める関数を作成せよ
  - 関数 ~sum()~ を調べよ (~?sum~ を参照)
  - 等差数列の和を利用してもよい
- 整数 \(n\) の階乗 \(n!\) を求める関数を作成せよ
  - 関数 ~prod()~ を調べよ (~?prod~ を参照)

#+begin_src R :eval no :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice 自作関数の定義
  #'
  #' 和 (summation) を計算する関数
  my_sum <- function(n){
    out <- sum(1:n) # 1からnまでの整数を生成して和を求める
    return(out)
  }
  my_sum(10) # 1から10までの和は?
  #' 別解
  my_sum2 <- function(n){
    out <- n*(n+1)/2 # 等差数列の和を利用した場合
    return(out)
  }
  my_sum2(10)
  #' 階乗 (factorial) を計算する関数
  my_fact <- function(n){
    out <- prod(1:n) # 1からnまでの整数を生成して積を求める
    return(out)
  }
  my_fact(5) # 5! は?
  #' ---------------------------------------------------------------------------
#+end_src
	  

* 制御構造
:PROPERTIES:
:ID:       DEED065C-03D8-4280-B8ED-F03D14E2D7CB
:END:
#+begin_src R :exports none
  #' @exercise 制御構造
#+end_src
** 制御文
- 最適化や数値計算などを行うためには，
  条件分岐や繰り返しを行うための仕組みが必要となる
- R言語を含む多くの計算機言語では
  - ~if~  (条件分岐)
  - ~for~  (繰り返し・回数指定)
  - ~while~  (繰り返し・条件指定)
  などの *制御文* が利用可能

** ~if~ 文
- 条件Aが *真* のとき処理Xを実行する
  #+begin_src R :eval no :tangle no
    if(条件A) {処理X} # 括弧内は複数行に渡ってよい
  #+end_src
- 上記の ~if~ 文に条件Aが *偽* のとき処理Yを実行することを追加する
  #+begin_src R :eval no :tangle no
    if(条件A) {処理X} else {処理Y} # 複数行で記述する場合は改行位置に注意   
  #+end_src

** ~if~ 文の例
:PROPERTIES:
:ID:       1978371E-8E18-4D0E-B485-2E60CBC1BF06
:END:
- [[color:green][今日の日付が19で割り切れるか?]]
  #+begin_src R
    today <- 20250502      # 今日の日付
    if(today %% 19 == 0) { # %% は余りを計算
      print("割り切れます．商は以下の値です．") 
      print(today %/% 19)  # 商を表示
    } else { # {}で囲まれたブロックが1つのまとまった処理に対応する
      print("割り切れません．余りは以下の値です．")
      print(today %% 19)   # 余りを表示
    } 
  #+end_src

** ~for~ 文
- ベクトル ~V~ の要素を *順に* 変数 ~i~ に代入して
  処理Xを繰り返し実行する
  #+begin_src R :eval no :tangle no
    for(i in V) {処理X} # V の要素はどんなデータ型でも良い
  #+end_src
- 処理Xは変数 ~i~ によって実行内容が変わってよい

** ~for~ 文の例
:PROPERTIES:
:ID:       2E987476-110E-478F-9733-63D17257B9EB
:END:
- [[color:green][アルファベットの20,15,11,25,15番目を表示]]
  #+begin_src R
    print(LETTERS)      # LETTERS ベクトルの内容を表示
    for(i in c(20,15,11,25,15)) {
      print(LETTERS[i]) # 指定した順番に表示
    }
  #+end_src

** ~while~ 文
- 条件Aが *真* である限り処理Xを繰り返す
  #+begin_src R :eval no :tangle no
    while(条件A) {処理X}
  #+end_src
- 処理Xは繰り返し必要な実行内容を記述し，
  終了するときに条件Aが満たされなくなるように書く
- 参考 : ~repeat~ 文というものもあるので調べてみよ

** ~while~ 文の例
:PROPERTIES:
:ID:       B9DB3037-D2C5-4151-AF3D-8EE95932B806
:END:
- [[color:green][素因数分解する]]
  #+begin_src R
    (n <- 2*11*17*31) # 分解の対象．今日の日付や my_fact(5) なども試してみよ
    p <- 2            # 最初に調べる数
    while(n != 1){    # 商(for文の中で計算している)が1になるまで計算する
      if(n%%p == 0) { # 余りが0か確認
        print(p)      # 割り切った数を表示
        n <- n/p      # 商を計算して分解の対象を更新
      } else {
        p <- p+1      # 割り切れない場合は次の数を調べる
      } # 更新される p は素数とは限らないのに上手く動く理由を考えてみよう
    }
  #+end_src

  #   while(n != 1){ # 商(for文の中で計算している)が1になるまで計算する
  #       if(n%%p == 0) { # 余りが0か確認
  #           print(p) # 割り切った数を表示
  #           n <- n/p # 商を計算して分解の対象を更新
  #       } else {
  #           p <- ifelse(p==2,p+1,p+2) # ifelse(p>2,p+2,p+1)
  #       } # 更新される p は素数とは限らないが，上手く動く理由は考えてみよ
  #   }
  # # while(n != 1){ # 商(for文の中で計算している)が1になるまで計算する
  #     for(i in p:n){ # pからnまで順に調べる
  #         if(n%%i == 0) { # 余りが0か確認
  #             print(i) # 割り切った数を表示
  #             n <- n/i # 商を計算して分解の対象を更新
  #             p <- i # 最初に調べる数を更新
  #             break # for文を途中で終了
  #         }  
  #     }
  # }

   # ** ~repeat~ 文
   #    - 処理Xを繰り返し実行
   #      #+begin_src R :exports code
   #        repeat 処理X
   #      #+end_src
   #    - 処理Xには
   #      #+begin_src R :exports code
   #        if(条件A) break
   #      #+end_src
   #      という記述が含まれている必要がある．
   #      この記述は，「条件Aが成立したら繰り返しをやめる」という意味
   

* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 例題
:PROPERTIES:
:ID:       F5F1E74F-4F5A-4A10-9D5D-F72ABBD13D8D
:END:
- 制御構造を利用して非負の整数 $n$ の階乗 $n!$ を求める関数を作成せよ．
  ただし，関数 ~prod()~ を用いないこと．

#+reveal: split
- ~for~ 文を用いた解答例
  #+begin_src R :exports none
    #' @exercise nの階乗を求める関数 (for文を用いた例)
  #+end_src
  #+begin_src R
    my_fact1 <- function(n){
      val <- 1       # 初期値の代入
      for(i in 1:n){ # 1からnまで順に掛ける
        val <- val*i
      }
      return(val)    # 計算結果を返す
    }
    my_fact1(4) # 正しい
    my_fact1(3) # 正しい
    my_fact1(2) # 正しい
    my_fact1(1) # 正しい
    my_fact1(0) # 間違い (0!=1)
  #+end_src

#+reveal: split
- ~if~ 文を用いた修正版
  #+begin_src R :exports none
    #' @exercise nの階乗を求める関数 (if文を用いた修正版)
  #+end_src
  #+begin_src R
    my_fact2 <- function(n){
      if(n==0){ # n=0 か確認して分岐する
        return(1)
      } else {
        val <- 1
        for(i in 1:n){ val <- val*i }
        return(val)
      }
    }
    my_fact2(4) # 正しい
    my_fact2(3) # 正しい
    my_fact2(2) # 正しい
    my_fact2(1) # 正しい
    my_fact2(0) # 正しい
  #+end_src

#+reveal: split
- ~while~ 文を用いた解答例
  #+begin_src R :exports none
    #' @exercise nの階乗を求める関数 (while文を用いた例)
  #+end_src
  #+begin_src R
    my_fact3 <- function(n){
      val <- 1 # 初期値の代入
      while(n>0){ # nから1まで順に掛ける．nが0なら計算しない
        val <- val*n
        n <- n-1
      }
      return(val)
    }
    my_fact3(4) # 正しい
    my_fact3(3) # 正しい
    my_fact3(2) # 正しい
    my_fact3(1) # 正しい
    my_fact3(0) # 正しい
  #+end_src
  #+begin_src R :exports none
    #' @notes
    #' 再帰を用いて書くこともできる
    my_fact4 <- function(n){
      if(n<0) return(NA)
      if(n == 0 | n == 1) return(1)
      return(n * my_fact4(n-1))
    }
    sapply(-2:5, my_fact4) # -2から5を my_fact4 で計算した結果を返す
  #+end_src

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       913811A5-8B17-4F8D-B559-CCD7E35A728B
:END:
- 整数 \(n\) の Fibonacci 数を求める関数を作成せよ
  - Fibonacci 数は以下の漸化式で計算される
    #+begin_quote
    \begin{align}
      F_{0}&=0\\
      F_{1}&=1\\
      F_{n}&=F_{n-1}+F_{n-2}
    \end{align}
    #+end_quote
- 行列 \(X\) が与えられたとき，各列の平均を計算する関数を作成せよ
- 前問で \(X\) がベクトルの場合にはその平均を計算するように修正せよ 
  - 関数 ~is.vector()~ が利用できる

#+begin_src R :eval no :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice 制御構造
  #'
  #' Fibonacci 数を返す関数
  my_fibo <- function(n){
    f0 <- 0 # 第0項の設定
    f1 <- 1 # 第1項の設定
    if(n<0) {
      print("計算できません")
      return(NA) # 欠損値を返す
    }
    if(n==0) { # n=0の場合
      return(f0)
    }
    if(n==1) { # n=1の場合
      return(f1)
    }
    for(i in 2:n) { # n>=2の場合
      fn <- f1 + f0 # fn = fn-1 + fn-2 の計算
      f0 <- f1 # fn-2 の値の更新 (f0が覚えておく)
      f1 <- fn # fn-1 の値の更新 (f1が覚えておく)
    }
    return(fn) # 計算結果を返す
  }
  #' Fibonacci 数を6項目まで計算
  c(my_fibo(1),my_fibo(2),my_fibo(3),my_fibo(4),my_fibo(5),my_fibo(6))
  #' 同じ関数に別の値を入れて計算する方法はいくつか用意されている
  sapply(1:30, my_fibo)
  #'
  #' 行列の列の平均を計算する関数
  my_col_ave <- function(X) {
    ave <- rep(0, length = ncol(X)) # 平均を記録するベクトルを用意
    for(i in 1:ncol(X)){ # 列ごとに計算
      ave[i] <- sum(X[,i])/nrow(X) # 平均の定義に従って計算
      ## ave[i] <- mean(X[,i]) # 平均を計算する関数を用いても良い
    }
    return(ave)
  }
  (A <- matrix(1:12,3,4,byrow=TRUE))
  my_col_ave(A) # 正しい答えを返す
  (x <- 1:12)
  my_col_ave(x) # うまく動かない
  #'
  #' ベクトルと行列を扱えるように修正
  my_col_ave <- function(X){ 
    if(is.vector(X)){ # ベクトルとそれ以外の場合分け
      ave <- mean(X)
    } else { # ベクトル以外は行列と想定して計算
      ave <- rep(0,length=ncol(X))
      for(i in 1:ncol(X)){
        ave[i] <- mean(X[,i])
      }
    }
    return(ave)
  }
  my_col_ave(A)
  my_col_ave(x) # 正しい答えを返す
  #' ---------------------------------------------------------------------------
#+end_src


* 次回の予定
- データフレームの操作
- ファイルの取り扱い
- データの集計


* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
   
