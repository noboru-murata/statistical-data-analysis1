# -*- eval: (visual-line-mode) -*-

# Based on Jens Lechtenbörger's org/config.org
# original license identifiers are:
# SPDX-FileCopyrightText: 2017-2024 Jens Lechtenbörger
# SPDX-License-Identifier: CC-BY-SA-4.0

# Neither generate table of contents nor section numbers
#+OPTIONS: toc:nil num:nil

# Enable: browser history, fragment IDs in URLs, mouse wheel, links between presentations
# Note that option "history" implies option "hash", which makes sure that
# reload leads to the same slide: https://revealjs.com/config/
#+OPTIONS: reveal_history:t reveal_fragmentinurl:t
#+OPTIONS: reveal_mousewheel:nil reveal_inter_presentation_links:t

# Disable separate PDF pages for each fragment.  Just use one per slide.
#+OPTIONS: reveal_pdfseparatefragments:nil

# Display notes on separate page for PDF export.
#+REVEAL_EXPORT_NOTES_TO_PDF: separate-page

# Enable smart quotes
#+OPTIONS: ':t

# Transition styles: none/fade/slide/convex/concave/zoom/cube
#+REVEAL_TRANS: fade
#+REVEAL_THEME: oer-reveal

#+REVEAL_PLUGINS: (notes search zoom)

# The following variables are non-standard.
# Use different heading for TOC.
#+REVEAL_TOC_SLIDE_TITLE: Agenda

#+REVEAL_EXTRA_CSS: ./reveal.js/dist/theme/fonts/source-sans-pro/source-sans-pro.css

# Allow to selectively hide links.
#+REVEAL_EXTRA_SCRIPTS: ("./reveal.js/dist/theme/hidelinks.js")

# -----
# Use menu plugins
#+REVEAL_ADD_PLUGIN: menu RevealMenu plugin/menu/menu.js
#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/menu/menu.css
#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/menu/font-awesome/css/fontawesome.css 
# Use spotlight plugins (Q/W)
#+REVEAL_ADD_PLUGIN: spotlight RevealSpotlight plugin/spotlight/spotlight.js
# Use chalkboard plugins (currently corrupted 2024/9/1)
#+REVEAL_ADD_PLUGIN: chalkboard RevealChalkboard plugin/chalkboard/plugin.js
#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/chalkboard/style.css
# Use drawer plugins (D/C)
# #+REVEAL_ADD_PLUGIN: drawer RevealDrawer plugin/drawer/drawer.js
# #+REVEAL_EXTRA_CSS: ./reveal.js/plugin/drawer/drawer.css
# Add some configuration for Reveal.initialize
# #+REVEAL_EXTRA_OPTIONS: spotlight: { size: 80, initialPresentationMode: false, }, drawer: { toggleDrawKey: "d", toggleBoardKey: "c", pathSize: 3, }, keyboard: { 81: function() { RevealSpotlight.toggleSpotlight()}, 87: function() { RevealSpotlight.togglePresentationMode();}, }
#+REVEAL_EXTRA_OPTIONS: spotlight: { size: 80, initialPresentationMode: false, }, keyboard: { 81: function() { RevealSpotlight.toggleSpotlight()}, 87: function() { RevealSpotlight.togglePresentationMode();}, }
# customcontrols doesn't work
# #+REVEAL_EXTRA_OPTIONS: customcontrols: { controls: [ { icon: '<i class="fa fa-pen-square"></i>', title: 'Toggle chalkboard (B)', action: 'RevealChalkboard.toggleChalkboard();' }, { icon: '<i class="fa fa-pen"></i>', title: 'Toggle notes canvas (C)', action: 'RevealChalkboard.toggleNotesCanvas();' } ] }, spotlight: { size: 80, initialPresentationMode: false, }, keyboard: { 81: function() { RevealSpotlight.toggleSpotlight()}, 87: function() { RevealSpotlight.togglePresentationMode();}, chalkboard: { buttons: true}, }
# Use my custom title slide.
#+REVEAL_TITLE_SLIDE: ./reveal.js/local/mycourse.html
# Use my custom css 
#+REVEAL_EXTRA_CSS: ./reveal.js/local/mycourse.css
# -----

# Set a default bib file.
#+MACRO: bibliographyfile bibliography:library.bib

# Macros to display square brackets (in texts of hyperlinks).
# Based on: https://emacs.stackexchange.com/questions/7792/can-i-make-links-in-org-mode-that-contain-brackets-or
# Square Bracket Open [
#+MACRO: BO @@latex:\char91{}@@@@html:&#91;@@
# Square Bracket Close ]
#+MACRO: BC @@latex:\char93{}@@@@html:&#93;@@

# Macro for forced line break/newline, e.g., in titles.
#+MACRO: BR @@latex:\\@@@@html:<br />@@

# Macro to generate abbr element in HTML.  If a second argument is given, it
# defines the title attribute.  For LaTeX, output first attribute as is and
# ignore second one.
#+MACRO: abbr (eval (concat "@@latex:" $1 "@@@@html:<abbr" (if (< 0 (length $2)) (concat " title=\"" $2 "\"") "") ">" $1 "</abbr>@@"))

# Setup for PDF generation via LaTeX export.
# -----
#+LaTeX_CLASS: scrartcl
#+LaTeX_CLASS_OPTIONS: [10pt,oneside,fleqn]
#+LATEX_HEADER: \usepackage[style=plain,list=minted]{myhandout}
#+LATEX_HEADER: \usepackage[backend=biber,style=alphabetic]{biblatex}
#+LATEX_HEADER: \addbibresource{library.bib}
#+LATEX_HEADER: \newenvironment{notes}{\par\footnotesize}{\par}
#+LATEX_HEADER: \newenvironment{NOTES}{\par\footnotesize}{\par}
#+LATEX_HEADER: \newenvironment{leftcol}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{rightcol}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{leftcol30}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{leftcol40}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{leftcol60}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{leftcol70}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{rightcol30}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{rightcol40}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{rightcol60}{\relax}{\relax}
#+LATEX_HEADER: \newenvironment{rightcol70}{\relax}{\relax}
#+LATEX_HEADER: \definecolor{red}{named}{myDarkRed}
#+LATEX_HEADER: \definecolor{green}{named}{myDarkGreen}
#+LATEX_HEADER: \definecolor{blue}{named}{myDarkBlue}
#+LATEX_HEADER: \definecolor{orange}{named}{myDarkOrange}
# -----

# Macros to display code in different colors.
#+MACRO: blackcode (eval (format "@@html:<code><span style=\"color:black; font-size:smaller;\">%s</span></code>@@ @@latex:\\verb|%s|@@" (org-html-encode-plain-text $1) $1))
#+MACRO: redcode (eval (format "@@html:<code><span style=\"color:darkred; font-size:smaller;\">%s</span></code>@@ @@latex:\\rverb|%s|@@" (org-html-encode-plain-text $1) $1))
#+MACRO: greencode (eval (format "@@html:<code><span style=\"color:darkgreen; font-size:smaller;\">%s</span></code>@@ @@latex:\\gverb|%s|@@" (org-html-encode-plain-text $1) $1))
#+MACRO: bluecode (eval (format "@@html:<code><span style=\"color:darkblue; font-size:smaller;\">%s</span></code>@@ @@latex:\\bverb|%s|@@" (org-html-encode-plain-text $1) $1))

# Function to insert an agenda at position of choice.  Insert the
# following line where your agenda should appear: #+CALL: insert-agenda()
#+name: insert-agenda
#+begin_src emacs-lisp :var agenda-heading="Agenda" :var agenda-heading-depth=1 :var include-depth=1 :results value raw :exports none
  (concat (make-string agenda-heading-depth ?*)
          " " agenda-heading "\n"
          ":PROPERTIES:
  :UNNUMBERED: notoc
  :reveal_data_state: no-toc-progress
  :HTML_HEADLINE_CLASS: no-toc-progress
  :END:
  ,#+REVEAL_TOC: headlines "
          (format "%s\n" include-depth)
          "#+LATEX: \\renewcommand{\\printtoctitle}[1]{}\n"
          "#+LATEX: \\tableofcontents\n\n")
#+end_src

# To display images with license information, some macros are
# available.
# See emacs-reveal-howto for sample use:
# https://gitlab.com/oer/emacs-reveal-howto
#
# First, revealimg() for horizontally centered images, caption
# underneath, license text rotated to the right.
# Macro revealimg() expects up to six arguments:
# 1. Filename for a file with meta-data about an image
# In addition, up to five optional arguments:
# 2. Caption
# 3. Maximum height of image in HTML, e.g., 50rh
# 4. List of CSS classes (space separated, containing "figure")
# 5. Specification whether
#    - a long (default/nil),
#    - a short (t; in this case `oer-reveal--short-license-template' is
#      used, which by default just produces "Figure under <license>",
#      where "Figure" is hyperlinked to its source and "<license>" should
#      typically be a  permissive license that does not require further
#      attribution such as CC0 or Public Domain), or
#    - no license (none)
#    should be used (arguments are documented for function
#    oer-reveal--export-attribution-helper)
# 6. List of space separated additional attributes to assign to the
#    figure’s div element.
# Note the above unit "rh" for an image’s max-height, added in version
# 3.10.0 of oer-reveal.  Previously, "vh" was recommended here, but
# that does not work properly with scaling of reveal.js when the
# screen’s resolution is larger than the slide height with reveal.js
# (previously leading to images that might overflow).  Just use rh
# where you would otherwise use vh.  With rv, oer-reveal replaces your
# unit with a pixel value that is computed from your slides’ height.
# E.g., if you use 10rh with a slide height of 700, then your image’s
# style includes a max-height of 70px, which is scaled properly by
# reveal.js.
#
# Second, reveallicense() displays an image inline in the surrouding
# paragraph or list, aligned to the right.  Again, license information
# is rotated to the right of the image.
# Macro reveallicense() expects up to six arguments, the filename
# for meta-data and optionally the maximum height, CSS classes (space
# separated, containing "figure"), an indicator for short license (as
# described above for revealimg()), an indicator whether the image
# is an SVG to be embedded as XML code into the HTML document, and a
# list of space separated additional attributes to assign to the
# figure’s div element.
# Embedding SVG directly is useful for single-file export with
# :reveal-single-file and for animated SVGs.
# Note that SVG images can also be used with revealimg().  In that case,
# they are just used in img elements, which is not possible if option
# :reveal-single-file is used.
#
# Concerning LaTeX export, the file extension is stripped for
# includegraphics commands, so a compatible format must be available.
# GIF images cannot be exported to LaTeX; variable
# oer-reveal--unsupported-tex-figure-formats contains a list of such
# formats.
# Finally, external images (those with a URL starting with "http[s]")
# are not exported to LaTeX.

#+MACRO: revealimg (eval (oer-reveal-export-attribution $1 $2 $3 $4 $5 $6))
#+MACRO: reveallicense (eval (oer-reveal-export-attribution $1 nil $2 $3 $4 $5 $6))

# Finally, revealgrid creates an image grid.
# Its six to eight arguments are as follows:
# 1. Unique grid number (e.g., starting from one)
# 2. File with names of images to position on the grid
# 3. Height of the grid as percentage of the height of the slide
#    (without unit)
# 4/5. Numbers of (a) columns and (b) rows of the grid
# 6. Grid-template-areas to specify what image to position on what
#    grid cell(s); see, e.g.:
#    https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
#    With this macro, the grid areas *must* be named ga1, ga2, ...
# 7. Optional indicator whether the grid as a whole (value grid) or individual
#    grid images (value t) should be fragmented (appear one after the other)
# 8. Optional license spefication (see argument 5 of revealimg above)
# This macro uses oer-reveal-export-image-grid in oer-reveal.el.
#+MACRO: revealgrid (eval (oer-reveal-export-image-grid $1 $2 $3 $4 $5 $6 $7 $8))

# -----
# define my options & properties
#+OPTIONS: date:t H:4 num:nil toc:nil \n:nil
#+OPTIONS: @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t 
#+OPTIONS: skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+PROPERTY: header-args:R :cache yes :session *R*
#+PROPERTY: header-args:R+ :exports both :results output
#+PROPERTY: header-args:R+ :width 800 :height 800 :res 100
#+PROPERTY: header-args:R+ :tangle yes
# -----
