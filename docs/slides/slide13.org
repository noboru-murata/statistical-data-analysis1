#+TITLE: 回帰分析
#+SUBTITLE: 第13講 - 変数間の関係を推測する
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@gmail.com
#+DATE: 
#+STARTUP: hidestars content indent
# Time-stamp: <2025-04-11 16:54:16 mura>
:REVEAL:
#+SETUPFILE: "./reveal.js/local/mycourse.org"
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
- 重回帰の問題
- MC実験を付けた方が良いかも
  
* 講義概要
:PROPERTIES:
:ID:       0EA6B760-E882-4157-B65E-D25F43BC7C5A
:END:
- 回帰分析
- 回帰係数の推定
  - 点推定
  - 区間推定
- 回帰係数の検定
  - 係数の有意性
- 決定係数

#+begin_src R :exports none :tangle no
  setwd("~/Desktop/lectures/u-tokyo/spring/course")
#+end_src
#+begin_src R :exports none
  ### 第13講 サンプルコード
  library(tidyverse)
  #' 日本語を用いる場合 macOS では以下の設定を行うと良い
  if(Sys.info()["sysname"] == "Darwin") { # macOS か調べて日本語フォントを指定
    theme_update(text = element_text(family = "HiraginoSans-W4"))
    update_geom_defaults("text", list(family = theme_get()$text$family))
    update_geom_defaults("label", list(family = theme_get()$text$family))}
#+end_src

  
* 回帰分析
** 回帰分析
- データのある変量をその他の変量を用いて説明・予測するモデル
  (*回帰モデル*)を構築するための分析法
- 変量の分類
  - 説明する側 : *説明変数* (または独立変数，共変量など)
  - 説明される側 : *目的変数* (または被説明，従属，応答変数など)
- 説明変数・目的変数ともに複数個あってもよい 
  - 目的変数は通常は1つ (複数の場合は個別に回帰モデルを構築)
  - 説明変数が1つの場合を *単回帰*, 2つ以上の場合を *重回帰*
  - この講義では単回帰のみ扱う

#+reveal: split
#+begin_src R :file figs/r-brainbody.png :exports results :results graphics :tangle no
  #' 線形回帰分析(単回帰)の例
  #' - Brain and Body Weights for 28 Species
  library("tidyverse") 
  data(Animals, package = "MASS")
  #' 回帰分析 (外れ値を除いた単回帰)
  idx <- c(6,16,26) # 外れ値のindex
  bb_lm <- lm(log(brain) ~ log(body),
              data = Animals,
              subset = -idx) # 外れ値を除く
  #' 恐竜の領域でも信頼・予測区間を描画する
  bb_new_body <- # 計算用のbody列を作成
    tibble(body = Animals |> pull(body) |>
             log() |> pretty(n=32) |> exp())
  bb_new_data <- # 作成したbody列に対する区間の計算
    tibble(bb_new_body,
           broom::augment(bb_lm,
                          newdata = bb_new_body,
                          interval = "confidence") |> # 信頼区間
           select(.fitted, .lower, .upper) |> exp() |>
           magrittr::set_colnames(c("brain","c.lower","c.upper")), # 列名の指定
           broom::augment(bb_lm,
                          newdata = bb_new_body,
                          interval = "prediction") |> # 予測区間
           select(.lower, .upper) |> exp() |>
           magrittr::set_colnames(c("p.lower","p.upper"))) # 列名の指定
  Animals |>
    rownames_to_column() |>
    ggplot(aes(body, brain)) + 
    geom_point(colour = "royalblue") +
    ggrepel::geom_text_repel(aes(label = rowname),
                             size = 3) +
    geom_line(data = bb_new_data,                    # 回帰式の描画
              colour = "dodgerblue") +
    geom_ribbon(data = bb_new_data,
                aes(ymin = c.lower, ymax = c.upper), # 信頼区間の描画
                fill = alpha("dodgerblue", 0.4)) +
    geom_ribbon(data = bb_new_data,
                aes(ymin = p.lower, ymax = p.upper), # 予測区間の描画
                fill = alpha("dodgerblue", 0.2)) +
    scale_x_log10() + scale_y_log10() +
    labs(title = "Brain and Body Weights",
         x = "body [kg]", y = "brain [g]")
#+end_src
#+CAPTION: 脳の重さと体重の関係
#+NAME: fig:r-brainbody
#+ATTR_HTML: :height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/r-brainbody.png]]

** 回帰モデル
- 説明変数 : \(X\)
- 目的変数 : \(Y\)
- \(Y\) を \(X\) で説明する関係式として一次関数を考える
  #+begin_quote
  \begin{equation}
    Y=\alpha+\beta X\quad\text{(線形回帰モデル)}
  \end{equation}
  #+end_quote
  - \(\alpha\): *定数項*
  - \(\beta\): \(X\) の *回帰係数*
- *注意* : 非線形な関係への対応
  - 適切な変数変換(二乗, 対数など)を施して線形な関係に変換
  - 弱い非線形性を線形で近似


* 回帰係数の点推定
** 回帰係数の点推定
- \(n\) 個の説明変数と目的変数の組 \((X,Y)\) を観測
  #+begin_quote
  \begin{equation}
    (X_1,Y_1),(X_2,Y_2),\dotsc,(X_n,Y_n)
  \end{equation}
  #+end_quote
- 回帰モデル : データには観測誤差が含まれる
  #+begin_quote
  \begin{equation}
    Y_i=\alpha+\beta X_i+\epsilon_i,\quad i=1,\dotsc,n.
  \end{equation}
  #+end_quote
  - \(\epsilon_1,\epsilon_2,\dotsc,\epsilon_n\) : *誤差項* または *撹乱項*
- 線形回帰モデルのパラメータ \(\alpha,\beta\) を推定

** 分析における仮定
- 説明変数 \(X_1,\dotsc,X_n\) は確率変数ではなく *確定値*
- 説明変数は一定値ではない \\
  (\(X_1=\cdots=X_n\) ではない)
- 誤差項 \(\epsilon_1,\dotsc,\epsilon_n\) は
  独立同分布な確率変数列
- 誤差項は 平均 \(0\) 分散 \(\sigma^2\) 

** 最小二乗法
- 係数 \(\alpha,\beta\) の回帰式で説明できない
  目的変数の変動
  #+begin_quote
  \begin{equation}
    e_i(\alpha,\beta)=Y_i-(\alpha+\beta X_i)\quad (i=1,\dotsc,n)
  \end{equation}
  #+end_quote
- 方針
  #+begin_quote
  回帰モデルの当てはまりがよい \\
  \(\Leftrightarrow\)
  \(e_1(\alpha,\beta),\dotsc,e_n(\alpha,\beta)\) の絶対値が小さい
  #+end_quote

#+reveal: split
- 評価基準
  #+begin_quote
  \(e_1(\alpha,\beta),\dotsc,e_n(\alpha,\beta)\) の平方和 (*残差平方和*)
  を最小にするように \(\alpha,\beta\) を決定
  \begin{equation}
    S(\alpha,\beta)
    =\sum_{i=1}^ne_i(\alpha,\beta)^2
    =\sum_{i=1}^n\{Y_i-(\alpha+\beta X_i)\}^2
  \end{equation}
  #+end_quote
- *最小二乗推定量*
  #+begin_quote
  \(S(\alpha,\beta)\) を最小にするパラメータの組
  \((\hat{\alpha},\hat{\beta})\)
  #+end_quote

#+reveal: split
- 最小二乗推定量の解
  #+begin_quote
  \begin{equation}
    \hat{\beta}
    =\frac{\sum_{i=1}^n(X_i-\bar{X})(Y_i-\bar{Y})}{\sum_{i=1}^n(X_i-\bar{X})^2},
    \quad
    \hat{\alpha}=\bar{Y}-\hat{\beta}\bar{X}
  \end{equation}
  ただし
  \begin{equation}
    \bar{X}=\frac{1}{n}\sum_{i=1}^nX_i,\quad
    \bar{Y}=\frac{1}{n}\sum_{i=1}^nY_i.
  \end{equation}
  #+end_quote

  # 回帰モデルの推定には通常 *最小二乗法* が用いられる
  # - \(S(\alpha,\beta)\): *残差平方和*

** 回帰分析の計算
:PROPERTIES:
:ID:       F02145A9-1338-4B5E-9F49-6B41A1EA92DA
:END:
- 関数 ~stats::lm()~ : 線形モデルを当てはめる
  #+begin_src R :eval no :tangle no
    lm(formula, data, subset, na.action, ...)
    #' formula: 式 (目的変数 ~ 説明変数)
    #' data: データフレーム
    #' subset: 対象とする部分データ
    #' na.action: 欠損値の扱い
    #' ...: 他のオプション．詳細は '?stats::lm' を参照
  #+end_src

  
* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       397952AC-8297-4F74-8FD4-839E16D4A65C
:END:
- 回帰分析におけるモデルの推定量の精度に関する
  確率シミュレーションを考えなさい．
- 東京の気象データを用いて，
  必要であれば適当な期間を抽出し，
  日射量から気温を説明する回帰モデルを構成しなさい．

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 回帰分析の Monte-Carlo 実験の例
  #'
  #' 人工データによる回帰モデルの推定
  #' 以下のモデルのパラメタは適当に変更せよ
  alpha <- 2    # 切片
  beta  <- 3    # 回帰係数
  n <- 20       # データ数
  sigma <- 0.5  # 誤差の標準偏差
  #' データの生成
  x <- runif(n, min = -1, max = 1) # 説明変数 (区間[-1,1]を想定)
  epsilon <- rnorm(n, sd = sigma)  # 誤差 (正規分布)
  y <- alpha + beta * x + epsilon
  #' データの視覚化
  toy_data <- tibble(x = x, y = y)
  gg <-
    toy_data |>
    ggplot(aes(x = x, y = y)) +
    geom_point(colour = "forestgreen")
  print(gg)
  #' 回帰式の推定
  toy_lm <- lm(y ~ x, data = toy_data)
  coef(toy_lm) # 推定された係数の取得
  #'
  #' 以下は回帰係数の有意性検定で詳述
  #' base R での情報の表示 
  toy_lm |> summary() # さまざまな情報がlist形式
  #' tidyverse での情報の表示 (tibble形式)
  toy_lm |> broom::tidy()    # 推定された係数の情報
  toy_lm |> broom::glance()  # 推定に関するさまざまな情報
  toy_lm |> broom::augment() # 推定に用いられたデータの情報
  #' 推定結果の視覚化
  gg +
    geom_abline(intercept = alpha,
                slope = beta,
                colour = "red") + # 真の回帰式
    geom_abline(intercept = coef(toy_lm)[1],
                slope = coef(toy_lm)[2],
                colour = "blue")  # 推定された回帰式
  #'
  #' Monte-Carlo 実験
  mc_trial <- function(){
    epsilon <- rnorm(n, sd = sigma)
    y <- alpha + beta * x + epsilon # 説明変数は固定しておく
    est <- lm(y ~ x) # データフレームにせずに直接 x,y を渡す
    #' データフレームにする場合は以下のようにすればよい
    #' lm(y ~ x, data = tibble(x = x, y = y))
    return(coef(est))
  }
  mc_data <- # 実験結果をデータフレームに変換
    replicate(2000, mc_trial()) |> t() |> as_tibble()
  #'
  #' 推定値の分布を視覚化
  mc_data |> # 切片
    ggplot(aes(x = `(Intercept)`)) +
    geom_density(fill = "pink") +
    geom_vline(xintercept = alpha, colour = "orange") +
    labs(x = expression(hat(alpha)), title = "切片の分布")
  mc_data |> # 傾き
    ggplot(aes(x = x)) +
    geom_density(fill = "palegreen") +
    geom_vline(xintercept = beta, colour = "darkgreen") +
    labs(x = expression(hat(beta)), title = "傾きの分布")
  #'
  #' 推定された回帰式のばらつきの表示
  mc_data |>
    slice_sample(n = 40) |> # Monte-Carlo 実験から40個ランダムに選択
    rowid_to_column() |>    # 番号列(rowid)を作成
    ggplot() +
    geom_abline(aes(intercept = `(Intercept)`,
                    slope = x,
                    colour = as_factor(rowid)), # 色を変える
                alpha = 0.4, # alpha値を低くして色を薄くする
                show.legend = FALSE) + # 凡例は表示しない
    geom_abline(intercept = alpha,
                slope = beta,
                colour = "red",
                linewidth = 1.1) + # 真の回帰式(太め)
    xlim(-1,1) + ylim(alpha-beta*1.1, alpha+beta*1.1) + # 描画範囲の指定
    labs(title = "推定された回帰式のばらつき")
  #' 同じ生成モデルでもデータによって推定結果がばらつくことがわかる
  #' ---------------------------------------------------------------------------
#+end_src

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 回帰モデルの点推定
  #'
  #' 気候データによる例
  #' データの読み込み
  tw_data <- read_csv("data/tokyo_weather.csv")
  #'
  #' データの散布図 (1年分)
  tw_data |>
    ggplot(aes(x = solar, y = temp)) +
    geom_point(colour = "olivedrab") +
    labs(x = "日射量", y = "気温")
  #'
  #' 回帰式の推定
  tw_lm <- lm(temp ~ solar,    # 目的変数 ~ 説明変数
              data = tw_data) # 気温を日射量で説明
  tw_lm |> summary()       # 結果の要約
  tw_lm |> broom::tidy()   # 係数とその統計量
  tw_lm |> broom::glance() # その他の統計量
  #'
  #' 回帰直線の図示 (前の図に重ね描き)
  last_plot() +
    geom_abline(intercept = coef(tw_lm)[1], # 切片
                slope = coef(tw_lm)[2],     # 回帰係数
                colour = "slateblue",
                linewidth = 1.2) 
  #'
  #' 関数 geom_smooth を用いることもできる
  tw_data |>
    ggplot(aes(x = solar, y = temp)) +
    geom_point(colour = "olivedrab") +
    geom_smooth(method = "lm", # 関数 lm を用いて信頼区間(平滑化方法)を計算
                se = FALSE,    # 信頼区間を付けない
                colour = "slateblue") +
    labs(x = "日射量", y = "気温")
  #'
  #' 期間を限って分析する
  #' データの散布図 (夏のモデル)
  tw_data |>
    filter(month %in% 7:9) |> # 7月-9月を抽出
    ggplot(aes(x = solar, y = temp)) +
    geom_point(colour = "olivedrab") +
    labs(x = "日射量", y = "気温")
  #'
  #' 回帰式の推定
  tw_lm2 <- lm(formula(tw_lm), # 前の式を利用
               data = tw_data,
               subset = month %in% 7:9) # 7月-9月を抽出
  tw_lm2 |> summary()
  #'
  #' @notes
  #' 期間を限った分析は以下のように書くこともできる
  #' 
  tw_data |>
    filter(month %in% 7:9) |>    # 7月-9月を抽出
    lm(formula(tw_lm), data = _) # パイプ演算の内容を data に渡す
  #'
  #' 推定結果の可視化
  last_plot() +
    geom_abline(intercept = coef(tw_lm2)[1],
                slope = coef(tw_lm2)[2],
                colour = "tomato",
                linewidth = 1.2) 
  #'
  #' 関数 geom_smooth を用いてもよい
  tw_data |>
    filter(month %in% 7:9) |> 
    ggplot(aes(x = solar, y = temp)) +
    geom_point(colour = "olivedrab") +
    geom_smooth(method = "lm", 
                se = FALSE,    
                colour = "tomato") +
    labs(x = "日射量", y = "気温")
  #'
  #' 全データのモデルと夏のモデルを比較する
  tw_data |>
    mutate(summer = ifelse(month %in% 7:9,
                           "Jul-Sep", # 7月-9月のラベル
                           "others")) |> 
    ggplot(aes(x = solar, y = temp, colour = summer)) +
    geom_point() +
    geom_abline(intercept = coef(tw_lm)[1],
                slope = coef(tw_lm)[2],
                colour = "slateblue",
                linewidth = 1.2) +
    geom_abline(intercept = coef(tw_lm2)[1],
                slope = coef(tw_lm2)[2],
                colour = "tomato",
                linewidth = 1.2) +
    labs(x = "日射量", y = "気温", colour = NULL)
  #'
  #' @notes
  #' 関数 geom_smooth を用いる場合は以下のようにすればよい
  #' 
  tw_data |>
    mutate(summer = ifelse(month %in% 7:9,
                           "7-9月", # 7月-9月のラベル
                           "その他")) |> 
    ggplot(aes(x = solar, y = temp, colour = summer)) +
    geom_point() +
    geom_smooth(method = "lm", 
                se = FALSE,    
                colour = "slateblue") +
    geom_smooth(data = \(x)filter(x, summer == "7-9月"), # 7-9月に限定
                method = "lm", 
                se = FALSE,    
                colour = "tomato") +
    labs(x = "日射量", y = "気温")
  #' data に一変数関数を渡すと geom_smooth 内での処理を限定することができる
  #' 上記は base R での無名関数の記述を用いているが
  #' tidyverse では
  #'   ~ filter(., summer == "7-9月")
  #'   . %>% filter(summer == "7-9月")
  #' のように書くこともできる
  #' ---------------------------------------------------------------------------
#+end_src


* 回帰係数の区間推定
** 誤差項に関する仮定
- \(\epsilon_i\) は正規分布に従う
- 上の仮定より
  \(\hat{\alpha},\hat{\beta}\) は *正規分布* に従う
- 点推定の平均と分散
  #+begin_quote
  \begin{align}
    &\mathbb{E}[\hat{\alpha}]=\alpha,
    &&\mathbb{E}[\hat{\beta}]=\beta,\\
    &\mathrm{Var}(\hat{\alpha})=\frac{\sigma^2\sum_{i=1}^{n}X_i^2}{n\sum_{i=1}^{n}(X_i-\bar{X})^2},
    &&\mathrm{Var}(\hat{\beta})=\frac{\sigma^2}{\sum_{i=1}^{n}(X_i-\bar{X})^2}
  \end{align}
  #+end_quote
- \(\sigma^2\) が *既知なら* 正規分布を用いて信頼区間を構成

** 誤差分散の推定
- 一般に \(\sigma^2\) は *既知でない* ためデータから推定
  - \(\epsilon_i\) の平均は0
  - \(\sigma^2\) は \(\epsilon_i\) の共通の分散
- 誤差と回帰式の関係
  #+begin_quote
  \begin{equation}
    \epsilon_i=Y_i-(\alpha+\beta X_i)
    \quad(i=1,\dotsc,n)      
  \end{equation}
  #+end_quote
- \(\sigma^2\) の自然な推定量(良いとは限らない)
  #+begin_quote
  \begin{equation}
    \hat{\sigma}^2
    =\frac{1}{n}\sum_{i=1}^n\hat{\epsilon}_i^2
    \quad\text{ただし}\quad\hat{\epsilon}_i
    =Y_i-(\hat{\alpha}+\hat{\beta}X_i),\quad(i=1,\dotsc,n)
  \end{equation}
  #+end_quote

#+reveal: split
- *残差* \(\hat{\epsilon}_1,\dotsc,\hat{\epsilon}_n\) の性質
  (資料; 正規方程式)
  #+begin_quote
  \begin{equation}
    \sum\hat{\epsilon}_i=0,\quad
    \sum\hat{\epsilon}_iX_i=0.
  \end{equation}
  #+end_quote
- 残差の二乗平均の性質 (標本分散と同様の計算)
  #+begin_quote
  \begin{equation}
    \mathbb{E}[\hat{\epsilon}_i^2]=\sigma^2(n{-}2)/n\quad(i=1,\dotsc,n)      
    % \mathbb{E}[\hat{\epsilon}_i^2]=\frac{n{-}2}{n}\sigma^2\quad(i=1,\dotsc,n)      
  \end{equation}
  #+end_quote
- \(\sigma^{2}\) の不偏推定量
  #+begin_quote
  \begin{equation}
    \hat{\sigma}^2=\frac{1}{n{-}2}\sum_{i=1}^n\hat{\epsilon}_i^2.
  \end{equation}
  #+end_quote

** 回帰係数の性質
- \(\hat{\alpha},\hat{\beta}\) の分散の推定量 (資料; Gauss-Markovの定理)
  #+begin_quote
  \begin{equation}
    \mathrm{s.e.}(\hat{\alpha})^2
    =\frac{\hat{\sigma}^2\sum_iX_i^2}{n\sum_i(X_i-\bar{X})^2},
    \quad
    \mathrm{s.e.}(\hat{\beta})^2
    =\frac{\hat{\sigma}^2}{\sum_i(X_i-\bar{X})^2}
  \end{equation}
  #+end_quote
  - \(\mathrm{s.e.}(\hat{\alpha}),\mathrm{s.e.}(\hat{\beta})\) は *標準誤差* と呼ばれる
- 以下は \(\hat{\beta}\) と独立で自由度 \(n{-}2\) の \(\chi^2\) 分布に従う
  #+begin_quote
  \begin{equation}
    \frac{(n{-}2)\mathrm{s.e.}(\hat{\beta})^2}{\mathrm{Var}(\hat{\beta})}
  \end{equation}
  #+end_quote

** 回帰係数の区間推定
- 以下の確率変数は自由度 \(n{-}2\) の \(t\) 分布に従う
  #+begin_quote
  \begin{equation}
    \frac{\hat{\beta}-\beta}{\mathrm{s.e.}(\hat{\beta})}
    =
    \frac{(\hat{\beta}-\beta)/\sqrt{\mathrm{Var}(\hat{\beta})}}{\sqrt{(n{-}2)\mathrm{s.e.}(\hat{\beta})^{2}/(n{-}2)\mathrm{Var}(\hat{\beta})}}
  \end{equation}
  #+end_quote
- \(\gamma\in(0,1)\) に対する \(\beta\) の \(1-\gamma\) 信頼区間
  #+begin_quote
  \begin{equation}
    \left[
      \hat{\beta}-t_{1{-}\gamma/2}(n{-}2)\cdot \mathrm{s.e.}(\hat{\beta}),\;
      \hat{\beta}+t_{1{-}\gamma/2}(n{-}2)\cdot \mathrm{s.e.}(\hat{\beta})
    \right]  
  \end{equation}
  #+end_quote

** 区間推定の計算
:PROPERTIES:
:ID:       A4478C49-2666-4D13-8D28-3A6BAA45BF1B
:END:
- 関数 ~confint()~ : 係数の信頼区間を求める
  #+begin_src R :eval no :tangle no
    confint(object, parm, level = 0.95, ...)
    #' object: 関数 lm で推定したモデル
    #' parm: 区間推定をするパラメタ．指定しなければ全て
    #' level: 信頼係数
    #' ...: 他のオプション．詳細は '?confint' を参照
  #+end_src

#+reveal: split
- 関数 ~predict()~ : 予測値の信頼区間を求める
  #+begin_src R :eval no :tangle no
    predict(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,
        interval = c("none", "confidence", "prediction"),
        level = 0.95, type = c("response", "terms"),
        terms = NULL, na.action = na.pass,
        pred.var = res.var/weights, weights = 1,
        rankdeficient = c("warnif", "simple", "non-estim", "NA", "NAwarn"),
        tol = 1e-6, verbose = FALSE,
        ...)
    #' object: 関数 lm で推定したモデル
    #' newdata: 予測値を計算する説明変数
    #' interval: 何も付けない(none)・信頼区間(confidence)・予測区間(prediction)
    #' level: 信頼係数 (既定値は0.95)
    #' ...: 他のオプション．詳細は '?predict.lm' を参照
  #+end_src

#+reveal: split
- 関数 ~broom::augment()~ によるデータの情報 (tidyverse)
  #+begin_src R :eval no :tangle no
    augment(
      x,
      data = model.frame(x),
      newdata = NULL,
      se_fit = FALSE,
      interval = c("none", "confidence", "prediction"),
      conf.level = 0.95,
      ...
    )
    #' x: 関数 lm で推定したモデル
    #' newdata: data と異なる説明変数であてはめ・予測を行う
    #' se_fit: 標準誤差を付けるか否か
    #' interval: 信頼区間(confidence)・予測区間(prediction)を付ける
    #' 詳細は '?broom::augment.lm' を参照
  #+end_src
  

* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       9B3552EE-D426-4427-8FBA-3BA8DA0D86CA
:END:
- 前問で作成した回帰モデルについて
  区間推定を行いなさい．

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 回帰モデルの区間推定
  #'
  #' 気候データによる例 (前問で構成したモデルを用いる)
  #' 
  #' tw_lm: 1年分のモデル 
  confint(tw_lm)
  #'
  #' 区間推定を視覚化
  #' 関数 geom_smooth を用いると簡潔に記述できる
  #' 
  tw_data |>
    ggplot(aes(x = solar, y = temp)) +
    geom_point(aes(colour = factor(month))) + # 月ごとに色を変える
    geom_smooth(method = "lm", # 関数 lm を用いて信頼区間(平滑化方法)を計算
                level = 0.95,  # 既定値なので無くても良い
                colour = "royalblue",  # 線の色
                fill = "steelblue") +  # 塗り潰しの色
    labs(x = "日射量", y = "気温", colour = NULL)
  #'
  #' @notes
  #' 上記の描画を愚直に行うには以下のような手続きを考えればよい
  #' 
  #' 視覚化したい信頼区間に合わせて適切な説明変数と信頼区間を作成する
  tw_conf <-
    tw_lm |> 
    broom::augment(newdata = tibble(solar = tw_data |> pull(solar) |>
                                      range() |> # 日射量の範囲を取得
                                      pretty(n = 50)), # 50個程度の区間を作成
                   interval = "confidence",
                   conf.level = 0.95) # 既定値なので無くてもよい
  #' データ点と信頼区間を描画する
  tw_data |>
    ggplot(aes(x = solar, y = temp)) +
    geom_point(aes(colour = factor(month))) +
    geom_abline(intercept = coef(tw_lm)[1], 
                slope = coef(tw_lm)[2],
                colour = "royalblue",
                linewidth = 1.2) +
    geom_ribbon(data = tw_conf, # temp 列の代わりに .fitted列がある
                aes(x = solar, y = .fitted,
                    ymin = .lower, ymax = .upper),
                fill = alpha("steelblue", 0.3)) +
    labs(x = "日射量", y = "気温", colour = NULL)
  #'
  #' データ数がある程度多い場合はデータの説明変数をそのまま用いてもよい
  tw_lm |>
    broom::augment(interval = "confidence") |>
    ggplot(aes(x = solar, y = temp)) +
    geom_point(colour = "olivedrab") + # augmentの出力にmonthは含まれていないため
    geom_line(aes(y = .fitted),
              colour = "royalblue") +
    geom_ribbon(aes(ymin = .lower, ymax = .upper),
                fill = alpha("steelblue", 0.3)) +
    labs(x = "日射量", y = "気温")
  #'
  #' データに信頼区間を追加する方法もある
  tw_data |>
    mutate(broom::augment(tw_lm, interval = "confidence")) |>
    ggplot(aes(x = solar, y = temp)) +
    geom_point(aes(colour = factor(month))) + 
    geom_line(aes(y = .fitted), 
              colour = "royalblue") +
    geom_ribbon(aes(ymin = .lower, ymax = .upper), 
                fill = alpha("steelblue", 0.3)) +
    labs(x = "日射量", y = "気温", colour = NULL)
  tw_data |>
    mutate(predict(tw_lm, # 推定したモデル
                   interval = "confidence", # 信頼区間の推定を指定
                   level = 0.95) |>
           as_tibble()) |> # tibble形式に変換して追加する (列名に注意)
    ggplot(aes(x = solar, y = temp)) +
    geom_point(aes(colour = factor(month))) + # augmentの出力にmonthは含まれていないため
    geom_line(aes(y = fit), # predict の出力は .fitted でない
              colour = "royalblue") +
    geom_ribbon(aes(ymin = lwr, ymax = upr), # predict の出力は .lower/.upper でない
                fill = alpha("steelblue", 0.3)) +
    labs(x = "日射量", y = "気温", colour = NULL)
  #'
  #' tw_lm2: 夏のモデル 
  confint(tw_lm2)
  #'
  #' 視覚化
  model.frame(tw_lm2) |> # モデルの作成に用いたデータ
    ggplot(aes(x = solar, y = temp)) +
    geom_point(colour = "orange") +
    geom_smooth(method = "lm", level = 0.95,
                colour = "red", fill = "pink") +
    labs(x = "日射量", y = "気温", colour = NULL)
  #'
  #' 1年のデータも重ねて表示
  tw_lm2 |> broom::augment() |> # この関数でも取り出せる
    ggplot(aes(x = solar, y = temp)) +
    geom_point(data = tw_data, # 1年分のデータを使用
               colour = alpha("grey", 0.5)) + # 薄い灰色で表示
    geom_point(colour = "orange") +
    geom_smooth(method = "lm", level = 0.95,
                colour = "red", fill = "pink") +
    labs(x = "日射量", y = "気温", colour = NULL)
  #'
  #' 1年のデータから限定して信頼区間を描いてもよい
  tw_data |> 
    ggplot(aes(x = solar, y = temp)) +
    geom_point(aes(colour = factor(month))) +
    geom_smooth(data = \(x)filter(x, month %in% 7:9),
                method = "lm", level = 0.95,
                colour = "red", fill = "pink") +
    labs(x = "日射量", y = "気温", colour = NULL)
  #' ---------------------------------------------------------------------------
#+end_src


* 回帰係数の有意性検定
** 回帰係数の有意性
- 説明変数 \(X\) が目的変数 \(Y\) を説明・予測するのに本当に役立っているかを検証
  #+begin_quote
  \begin{equation}
    H_0:\beta=0\qquad\text{vs}\qquad H_1:\beta\neq0
  \end{equation}
  #+end_quote
- \(\beta\) の *有意性の検定*
  #+begin_quote
  帰無仮説 \(H_0\) が有意水準 \(\gamma\) で棄却されるとき，
  \(\beta\) は有意水準 \(\gamma\) で *有意である* 
  #+end_quote
  # 条件(C)を仮定して検定の方法を考える

** 回帰係数の有意性検定
- 帰無仮説 \(H_0\) が正しければ以下の統計量
  は自由度 \(n{-}2\) の \(t\) 分布に従う 
  #+begin_quote
  \begin{equation}
    t=\frac{\hat{\beta}}{\mathrm{s.e.}(\hat{\beta})}
  \end{equation}
  #+end_quote
- 対立仮説 \(H_1\) が正しければ, 
  \(\hat{\beta}\) は0でない値 \(\beta\) に近い値を取ることが期待されるため，
  \(|t|\) は0から離れた値を取る

#+reveal: split
- 棄却域による検定
  #+begin_quote
  有意水準を \(\gamma\in(0,1)\) とし，
  \(\hat{\beta}\) の *\(t\) 値* が以下の場合には帰無仮説を棄却
  \begin{equation}
    |t| > t_{1-\gamma/2}(n{-}2)
  \end{equation}
  #+end_quote
- \(p\) 値による検定
  #+begin_quote
  以下で定義される \(\hat{\beta}\) の *\(p\) 値* が
  \(\gamma\) 未満の場合に帰無仮説を棄却
  \begin{equation}
    \text{(\(p\) 値)}=2\int_{|t|}^\infty f(x)dx
  \end{equation}
  #+end_quote
  # - 回帰における \(t\) 値と \(p\) 値:
  # - 検定統計量の値: \(\hat{\beta}\) の *\(t\) 値*
  # - 検定の \(p\) 値: \(\hat{\beta}\) の *\(p\) 値* 

** 係数の検定
:PROPERTIES:
:ID:       D9AD7FC0-2744-40AB-A758-00878B473039
:END:
- 関数 ~stat::summary()~ : 情報の要約 (base R)
  #+begin_src R :eval no :tangle no
    summary(object)
    #' object: 関数 lm() で推定したモデル
    #' 関数の出力 (リスト名 $"名前" で参照可能)
    #' coefficients : 係数とt統計量
    #' fstatistics : F統計量 (モデルの評価)
    #' 詳細は '?summary.lm' を参照
  #+end_src

#+reveal: split
- 関数 ~broom::tidy()~ : 回帰係数の情報 (tidyverse)
  #+begin_src R :eval no :tangle no
    tidy(x, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE, ...)
    #' x: 関数 lm() で推定したモデル
    #' conf.int: 信頼区間を付けるか否か
    #' conf.level: 信頼係数
    #' 詳細は '?broom::tidy.lm' を参照
  #+end_src
- 関数 ~broom::glance()~ : モデルの統計情報 (tidyverse)
  #+begin_src R :eval no :tangle no
    glance(x, ...)
    #' x: 関数 lm() で推定したモデル
    #' F統計量は statistic/p.value の列
    #' 詳細は '?broom::glance.lm' を参照
  #+end_src
  


* 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       19F9EAC0-D3BA-4ABD-B955-4097AC40CC14
:END:
- 前問で作成した回帰モデルについて
  係数の検定を行いなさい．

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 回帰モデルの係数の検定
  #'
  #' 気候データによる例
  #' 前問で構成したモデルを用いる
  #'
  #' tw_lm: 1年分のモデル (base R での操作)
  summary(tw_lm)
  #' 情報が多いので，整理してみる
  summary(tw_lm)$coef # 名前は識別できれば途中まででも可
  summary(tw_lm)$coef["solar",c("t value","Pr(>|t|)")]
  summary(tw_lm)$coef[2,3:4] # 上と同じ
  summary(tw_lm)$fstat # F統計量 (モデルの有意性の評価)
  anova(tw_lm)$'Pr(>F)'[1] # F統計量のp値 (summaryからは取り出し難い)
  #'
  #' パイプを使う場合は以下のようにすればよい
  tw_lm |> summary() |> _$coef 
  tw_lm |> summary() |> _$coef["solar",c("t value","Pr(>|t|)")]
  tw_lm |> summary() |> _$coef[2,3:4]
  #'
  #' tw_lm: 1年分のモデル (tidyverse での操作)
  tw_lm |> broom::tidy() # 係数の情報をまとめたデータフレーム
  tw_lm |> broom::tidy() |> # solarの係数のt統計量とp値を抽出
    filter(term == "solar") |> select(statistic, p.value)
  tw_lm |> broom::tidy() |> _[2, c("statistic","p.value")]
  tw_lm |> broom::tidy() |> _[2,4:5]
  tw_lm |> broom::glance() # モデルの情報をまとめたデータフレーム
  tw_lm |> broom::glance() |> # F統計量に関する情報
    select(statistic, p.value, df, df.residual)
  #' 
  #' tw_lm2: 夏のモデル (base R での操作)
  summary(tw_lm2)
  coef(summary(tw_lm2)) # 関数coefでも可
  coef(summary(tw_lm2))["solar",c("t value","Pr(>|t|)")]
  coef(tw_lm2) # 推定された係数のみ取り出す場合
  coef(summary(tw_lm2))[,"Estimate"] # 上と同じ
  #' tw_lm2: 夏のモデル (tidyverse での操作)
  tw_lm2 |> broom::tidy()   # 係数の情報
  tw_lm2 |> broom::glance() # モデルの情報
  #' ---------------------------------------------------------------------------
#+end_src


* 決定係数
** 決定係数
- \(X\) が \(Y\) の変動をどの程度説明できるかを数量化
- *決定係数* (あるいは *寄与率*)
  #+begin_quote
  \begin{equation}
    R^{2}=
    \frac{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})^{2}}{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}
  \end{equation}
  #+end_quote
- \(\hat{Y}_{i}\) は
  *あてはめ値* または *予測値* と呼ばれる
  #+begin_quote
  \begin{equation}
    \hat{Y}_{i}=
    \hat{\alpha}+\hat{\beta}X_{i}\quad(i=1,\dotsc,n).  
  \end{equation}
  #+end_quote

#+reveal: split
- 以下の等式が成立
  #+begin_quote
  \begin{align}
    &\hat{\epsilon}_i
      =Y_i-\hat{Y}_i\quad (i=1,\dotsc,n)\\
    &\sum_{i=1}^{n}\hat{\epsilon}_i=0,\\
    &\frac{1}{n}\sum_{i=1}^nY_i=\bar{Y},\\
    &\frac{1}{n}\sum_{i=1}^n\hat{Y}_i=\bar{Y}.
  \end{align}
  #+end_quote

#+reveal: split
- 決定係数
  #+begin_quote
  \begin{equation}
    R^{2}=
    \frac{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})^{2}}{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}
  \end{equation}
  #+end_quote
- \(R^2\) の成分
  - \(R^2\) の分子 : あてはめ値の(標本平均まわりでの)変動
  - \(R^2\) の分母 : 目的変数の(標本平均まわりでの)変動
- \(R^2\) の意味
  - 回帰式が目的変数の変動をどの位説明できるか評価
  - 大きいほど説明力が高いと解釈される

** 決定係数の別表現
- \(R^2\) は以下のように書き直すことも可能
  - 目的変数の観測データとあてはめ値の相関の二乗
    #+begin_quote
    \begin{equation}
      R^{2}=
      \left\{
        \frac{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})(Y_{i}-\bar{Y})}
        {\sqrt{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})^{2}}
          \cdot
          \sqrt{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}}
      \right\}^{2}
    \end{equation}
    #+end_quote
  - 説明変数と目的変数の観測データの間の相関の二乗
    #+begin_quote
    \begin{equation}
      R^{2}=
      \left\{
        \frac{\sum_{i=1}^{n}(X_{i}-\bar{X})(Y_{i}-\bar{Y})}
        {\sqrt{\sum_{i=1}^{n}(X_{i}-\bar{X})^{2}}
          \cdot
          \sqrt{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}}
      \right\}^{2}
    \end{equation}
    #+end_quote

** 自由度調整済み決定係数
- 不偏分散による \(R^2\) の修正
  - 残差 \(\epsilon_i\) と目的変数 \(Y_i\) の標本分散による表現
    #+begin_quote
    \begin{equation}
      R^{2}
      =1-\frac{\frac{1}{n}\sum_{i=1}^{n}\hat{\epsilon}_{i}^{2}}{\frac{1}{n}\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}.
    \end{equation}
    #+end_quote
  - 不偏推定量で代替 : *自由度調整済み決定係数* (または寄与率)
    #+begin_quote
    \begin{equation}
      \bar{R}^{2}
      =1-\frac{\frac{1}{n{-}2}\sum_{i=1}^{n}\hat{\epsilon}_{i}^{2}}{\frac{1}{n-1}\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}.
    \end{equation}
    #+end_quote

** 決定係数の計算
:PROPERTIES:
:ID:       1E08B1FB-CEA5-4DE9-A958-DDC9676B18E7
:END:
- 関数 ~stat::summary()~ : 情報の要約 (base R)
  #+begin_src R :eval no :tangle no
    summary(object)
    #' object: 関数 lm() で推定したモデル
    #' 関数の出力 (リスト名 $"名前" で参照可能)
    #' r.squareds : 決定係数
    #' adj.r.squareds : 自由度調整済み決定係数
    #' 詳細は '?summary.lm' を参照
  #+end_src

#+reveal: split
- 関数 ~broom::tidy()~ : 回帰係数の情報 (tidyverse)
  #+begin_src R :eval no :tangle no
    tidy(x, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE, ...)
    #' x: 関数 lm() で推定したモデル
    #' conf.int: 信頼区間を付けるか否か
    #' conf.level: 信頼係数
    #' 詳細は '?broom::tidy.lm' を参照
  #+end_src
- 関数 ~broom::glance()~ : モデルの統計情報 (tidyverse)
  #+begin_src R :eval no :tangle no
    glance(x, ...)
    #' x: 関数 lm() で推定したモデル
    #' F統計量は statistic/p.value の列
    #' 詳細は '?broom::glance.lm' を参照
  #+end_src


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       036157C9-86CA-4AF1-B884-757209AD3835
:END:
- 前問で作成した回帰モデルについて
  決定係数を確認しなさい．
- 説明変数として降水量を用いた回帰モデルについて
  検討しなさい．

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 決定係数による回帰モデルの検討
  #'
  #' 気候データによる例
  #' 前問で構成したモデルを用いる
  #' tw_lm: 1年分のモデル (気温 ~ 日射量)
  summary(tw_lm) # 全情報の表示
  summary(tw_lm)$r.squared
  summary(tw_lm)$adj.r.squared
  tw_lm |> broom::glance() 
  tw_lm |> broom::glance() |> # 1:2列が決定係数
    select(r.squared, adj.r.squared)
  #'
  #' tw_lm2: 夏のモデル (気温 ~ 日射量)
  summary(tw_lm2) # 全情報の表示
  summary(tw_lm2)$r.squared
  summary(tw_lm2)$adj.r.squared
  tw_lm2 |> broom::glance() 
  tw_lm2 |> broom::glance() |> 
    select(r.squared, adj.r.squared)
  #'
  #' 降水量と気温の関係を調べる
  tw_lm3 <- lm(temp ~ rain, data = tw_data)
  tw_lm4 <- lm(formula(tw_lm3), # 上の式を用いる
               data = tw_data,
               subset = month %in% 7:9) # 夏(7-9月)のモデル
  #'
  #' tw_lm3: 1年分のモデル (気温 ~ 降水量)
  tw_lm3 |> summary()
  model.frame(tw_lm3) |> # 推定に用いたデータを利用
    ggplot(aes(x = rain, y = temp)) +
    geom_point(colour = "blue") +
    geom_smooth(method = "lm",
                colour = "red", fill = "pink") +
    labs(x = "降水量", y = "気温")
  #' tw_lm3 に有意性はないことがわかる
  #'
  #' tw_lm4: 夏のモデル (気温 ~ 降水量)
  tw_lm4 |> summary()
  model.frame(tw_lm4) |> # 推定に用いたデータを利用
    ggplot(aes(x = rain, y = temp)) +
    geom_point(colour = "orange") +
    geom_smooth(method = "lm",
                colour = "red", fill = "pink") +
    labs(x = "降水量", y = "気温")
  #' 夏場は雨が降ると気温が下がる傾向が有意にあることが読み取れる
  #' 決定係数が低いのはそもそも気温のばらつきが大きいことに起因すると考えられる
  #' ---------------------------------------------------------------------------
#+end_src

#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @notes
  #' ggplot2 を用いた線形回帰分析(単回帰)の例
  #' - Brain and Body Weights for 28 Species
  #'
  #' この項で用いるオブジェクトは 'bb_' とする
  #' 
  #' パッケージの読み込み
  #' 以下のほかに 'ggrepel' 'broom' 'magrittr' 'MASS' を利用
  library(tidyverse) 
  library(ggfortify) 
  #'
  #' データの読み込み ("MASS::Animals"を用いる)
  data(Animals, package = "MASS")
  #' 以下 "Animals" で参照可能
  #' 
  #' データの内容を確認
  help(Animals, package = "MASS")  # 内容の詳細を表示 
  print(Animals) # データの表示
  #'
  #' データのプロット (normal plot)
  Animals |>
    ggplot(aes(body, brain)) + # x軸，y軸に用いる列の指定
    geom_point(colour = "royalblue") + # 点の追加
    labs(title = "Brain and Body Weights (normal plot)",
         x = "body [kg]", y = "brain [g]") # タイトルと軸名の追加
  #'
  #' データのプロット (log plot)
  Animals |>
    ggplot(aes(body, brain)) +
    geom_point(colour = "royalblue") +
    scale_x_log10() + scale_y_log10() + # log-log plot を指定
    labs(title = "Brain and Body Weights (log-log plot)",
         x = "body [kg]", y="brain [g]")
  #' データの分布から両対数変換が分析においては適切であることがわかる
  #' 
  #' 回帰分析 (単回帰)
  bb_lm <- lm(log(brain) ~ log(body), # 対数変換した変数で線形回帰
              data = Animals)
  bb_lm |> summary() # 分析結果のまとめを表示
  #'
  #' 回帰式の表示 (信頼区間付き)
  Animals |>
    rownames_to_column() |>
    ggplot(aes(body, brain)) + 
    geom_point(colour = alpha("royalblue", 0.75)) +
    ggrepel::geom_text_repel(aes(label = rowname), # 各点の名前を追加
                    size = 3) + 
    geom_smooth(method = "lm", # 回帰式
                colour = "dodgerblue",
                fill = "dodgerblue") + 
    scale_x_log10() + scale_y_log10() + # log-log plot
    labs(title = "Brain and Body Weights",
         x = "body [kg]", y = "brain [g]")
  #' 回帰式の表示 (信頼区間・予測区間付き)
  Animals |>
    rownames_to_column() |>
    mutate( # 予測区間の情報を追加する
      broom::augment(bb_lm,
                     interval = "prediction", # 予測区間を指定
                     conf.level = 0.95) |>    # 既定値なので省略可能
      select(.fitted, .lower, .upper) |> exp() # 必要な列を選択して対数変換を戻す
    ) |>   
    ggplot(aes(body, brain)) + 
    geom_point(colour = "royalblue") +
    ggrepel::geom_text_repel(aes(label = rowname), # 各点の名前を追加
                    size = 3) + # 文字の大きさを調整
    geom_smooth(method = "lm", # 回帰式
                colour = "dodgerblue",
                fill = "dodgerblue") +
    geom_ribbon(aes(ymin = .lower, ymax = .upper), # 予測区間の描画
                fill = alpha("dodgerblue", 0.2)) +
    scale_x_log10() + scale_y_log10() + # log-log plot
    labs(title = "Brain and Body Weights",
         x = "body [kg]", y = "brain [g]")
  #'
  #' 予測区間の計算は関数 predict() を用いてもよい
  #' 
  #' mutate( # 予測区間の情報を追加する
  #'   predict(bb_lm,
  #'           newdata = Animals, # 対数変換のため指定しないと警告が出る
  #'           interval = "prediction") |>
  #'   exp() |>    # 対数変換を戻す
  #'   as_tibble() # tibble形式でfit/lwr/upr列を追加
  #' ) 
  #'
  #' 診断プロット
  autoplot(bb_lm,
           colour = "royalblue",
           smooth.colour = "gray50",
           smooth.linetype = "dashed",
           ad.colour = "blue",
           label.size = 3,      # 以下，外れ値ラベルに関する設定
           label.n = 5, 
           label.colour = "red")
  #'
  #' 外れ値を除いた回帰分析
  idx <- c(6,16,26) # 外れ値のindex
  bb_lm <- lm(log(brain) ~ log(body),
                   data = Animals,
                   subset = -idx) # 外れ値を除く
  bb_lm |> summary()
  #'
  #' 回帰式の表示 (信頼区間・予測区間付き)
  Animals |>
    rownames_to_column() |>
    mutate( 
      broom::augment(bb_lm,
                     newdata = Animals, # 外れ値を除いたので全データで計算
                     interval = "prediction") |>
      select(.fitted, .lower, .upper) |> exp()) |>   
    ggplot(aes(body, brain)) + 
    geom_point(colour = "royalblue") +
    ggrepel::geom_text_repel(aes(label = rowname), # 各点の名前を追加
                    size = 3) + # 文字の大きさを調整
    geom_smooth(data = \(x)slice(x, -idx), # 外れ値を除く
                method = "lm", # 回帰式
                colour = "dodgerblue",
                fill = "dodgerblue") +
    geom_ribbon(data = \(x)slice(x, -idx), # 外れ値を除く
                aes(ymin = .lower, ymax = .upper), # 予測区間の描画
                fill = alpha("dodgerblue", 0.2)) +
    scale_x_log10() + scale_y_log10() + # log-log plot
    labs(title = "Brain and Body Weights",
         x = "body [kg]", y = "brain [g]")
  #'
  #' 恐竜の領域でも信頼・予測区間を描画する
  bb_new_body <- # 計算用のbody列を作成
    tibble(body = Animals |> pull(body) |>
             log() |> pretty(n=32) |> exp())
  bb_new_data <- # 作成したbody列に対する区間の計算
    tibble(bb_new_body,
           broom::augment(bb_lm,
                          newdata = bb_new_body,
                          interval = "confidence") |> # 信頼区間
           select(.fitted, .lower, .upper) |> exp() |>
           magrittr::set_colnames(c("brain","c.lower","c.upper")), # 列名の指定
           broom::augment(bb_lm,
                          newdata = bb_new_body,
                          interval = "prediction") |> # 予測区間
           select(.lower, .upper) |> exp() |>
           magrittr::set_colnames(c("p.lower","p.upper"))) # 列名の指定
  Animals |>
    rownames_to_column() |>
    ggplot(aes(body, brain)) + 
    geom_point(colour = "royalblue") +
    ggrepel::geom_text_repel(aes(label = rowname),
                    size = 3) +
    geom_line(data = bb_new_data,                    # 回帰式の描画
              colour = "dodgerblue") +
    geom_ribbon(data = bb_new_data,
                aes(ymin = c.lower, ymax = c.upper), # 信頼区間の描画
                fill = alpha("dodgerblue", 0.4)) +
    geom_ribbon(data = bb_new_data,
                aes(ymin = p.lower, ymax = p.upper), # 予測区間の描画
                fill = alpha("dodgerblue", 0.2)) +
    scale_x_log10() + scale_y_log10() +
    labs(title = "Brain and Body Weights",
         x = "body [kg]", y = "brain [g]")
  #' 
  #' 診断プロット
  autoplot(bb_lm,
           colour = "royalblue",
           smooth.colour = "gray50",
           smooth.linetype = "dashed",
           ad.colour = "blue",
           label.size = 3,      # 以下，外れ値ラベルに関する設定
           label.n = 5, 
           label.colour = "red")
  #' ---------------------------------------------------------------------------
#+end_src


* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
   
   
   
   
     
